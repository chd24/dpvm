/* gentejs internal cgi module */

#include "../../../../lib/stdlib/stdlib.dpvmake"
#include "modules.dpvmake"

const char version[] = "gentejs cgi module 0.1.2, T18.746-T18.753"; /* $DVS:time$ */

(const char dbName[], const char file[], int status) -> () fileReadCallback = {
    if (status <= 0 || status % 66) {
        outputp("", "", "Status: 404 Not found\r\n\r\n");
        return;
    }

    int nLines = status / 66;

    char out[];
    printf(out, "Content-Type: application/javascript\r\n\r\n", {});
    printf(out, "/* Generated by %s */\r\n", {version});
    printf(out, "%s=new Arr(%d);\r\n", {dbName, nLines});

    int i;
    for (i = 0; i < nLines; i += 1) {
        char line[];
        substrcat(line, file, i * 66, i * 66 + 64);
        printf(out, "%s[%d]=\"%s\";\r\n", {dbName, line, i});
    }

    outputp("", "", out);
    return;
};

(const char path[], const char env[][]) -> (int status) gentejsCgi = {
    char filePath[], db[];

    if (!getParam(db, env, "f") || strchr(db, '.') < 0) {
        outputp("", "", "Status: 404 Not found\r\n\r\n");
        return 404;
    }

    int pos = path.csize;
    while (pos && path[pos - 1] != '/') pos -= 1;
    if (pos) pos -= 1;
    while (pos && path[pos - 1] != '/') pos -= 1;

    char root[];
    substrcat(root, path, 0, pos);

    printf(filePath, "%sarchives/te/%s", {root, db});

    db.cpop(db.csize - strchr(db, '.'));

    read(fileReadCallback, db, filePath, 0, 0x100000);
    return 200;
};

cgiModule gentejsCgiModule = {
    "/cgi-bin/gentejs.cgi",
    version,
    gentejsCgi
};
