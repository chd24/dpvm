/* blog internal cgi module, output class; T18.762-T19.051; $DVS:time$ */

#include "../../../../stdlib/stdlib.dpvmake"
#include "../../../../utils/utils.dpvmake"
#include "../../../../storage/te/te.dpvmake"
#include "../../../../storage/dfs/dfs.dpvmh"
#include "../../www_server.dpvmake"
#include "internal.dpvmake"
#include "version.dpvmh"

(volatile stateful char out[], const stateful char url[]) -> () encodeUrl = {
    const int normal[] = {0x03ffe00000000000, 0x47fffffe87fffffe, 0x0000000000000000, 0x0000000000000000,
                          0xa7ffe04000000000, 0x47fffffe87fffffe, 0x0000000000000000, 0x0000000000000000},
           hexdigits[] = {0x03ff000000000000, 0x0000007e0000007e, 0x0000000000000000, 0x0000000000000000};
    int i, size = url.csize, isfull = (!strstr(url, "http://") || !strstr(url, "https://")) << 2;
    for (i = 0; i < size; i += 1) {
        int c = url[i];
        if (normal[c >> 6 | isfull] >> (c & 0x3f) & 1 || (c == '%' && i + 2 < size &&
                hexdigits[url[i + 1] >> 6] >> (url[i + 1] & 0x3f) & hexdigits[url[i + 2] >> 6] >> (url[i + 2] & 0x3f) & 1))
            out.cpush(c);
        else
            printf(out, "%%%02X", {c});
    }
    return;
};

(volatile stateful char out[], const stateful char text[]) -> () encodeText = {
     int i, size = text.csize;
    for (i = 0; i < size; i += 1) {
        int c = text[i];
             if (c == '>') strcat(out, "&gt;");
        else if (c == '<') strcat(out, "&lt;");
        else
            out.cpush(c);
    }
    return;
};

(const stateful blogObj blog, const char last[], int depth) -> (const char ref[]) blogRef = {
    char res[];

    printf(res, "/%s", {blog.program});

    if (depth >= 1) {
        char str[] = blog.users[0].name;
        if (last.csize && depth == 1)
            str = last;
        printf(res, "/%s", {str});
    }

    if (depth >= 2) {
        char str[] = blog.users[0].password;
        if (last.csize && depth == 2)
            str = last;
        printf(res, "/p%s", {str});
    }

    if (depth >= 3) {
        if (last.csize && depth == 3)
            printf(res, "/%s", {last});
        else
            printf(res, "/%X", {blog.postTime});
    }

    if (depth >= 4) {
        char str[] = blog.file;
        if (last.csize && depth == 4)
            str = last;
        res.cpush('/');
        encodeUrl(res, str);
    }

    return res;
};

(volatile stateful char out[], volatile stateful blogObj blog, const stateful char url[]) -> () outUrl = {
    if (strstr(url, "http://") && strstr(url, "https://") && strchr(url, '/'))
        printf(out, "%s/", {blogRef(blog, "", 3)});

    encodeUrl(out, url);
    return;
};

(volatile stateful char out[], volatile stateful blogObj blog, const char fileName[], int plain) -> (int status) outFile = {
    char file[];
    if (fileName == "author.txt")
        file = blog.author;
    else if (fileName == "header.txt")
        file = blog.header;
    else if (fileName == "message.txt")
        file = blog.message;
    else
        file = "";

    const int F_URL = 1;
    const int F_HTML = 2;

    int begin, end = file.csize, uni, cp866, size = out.csize, flags;
    char oldout[] = out, oldtag[], url[];

    while (begin < end) {
        uni = file[begin];
        if (uni < 0x80)
            begin += 1;
        else if (cp866) {
            const int offsets[] = {0, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x410, 0x420, 0x430, 0xB0, 0xC0, 0xD0, 0x440, 0xF0};
            begin += 1;
            if (uni == 0xf0) uni = 0x401;
            else if (uni == 0xf1) uni = 0x451;
            else uni = offsets[uni >> 4] + (uni & 0xf);
        } else
            (uni, begin) = scanutf8(file, begin, end);

        if (uni == -1) {
            cp866 = 1;
            begin = 0;
            out.cpop(out.csize - size);
	} else if (uni == '\r' && !plain) ;
	else if (uni == '\n' && !(flags & F_HTML || plain)) strcat(out, "<br>\n");
	else if (uni == '<' && !(flags & F_HTML || plain)) strcat(out, "&lt;");
	else if (uni == '>' && !(flags & F_HTML || plain)) strcat(out, "&gt;");
	else if (uni == '[' && !plain) {
            char tag[];

            while (begin < end && file[begin] != ']')
                tag.cpush(file[begin]), begin += 1;

            if (begin < end) {
                begin += 1;

                if (!oldtag.csize && (tag == "img" || tag == "url" || tag == "audio" || tag == "video")) {
                    strcat(oldtag, tag);
                    out = url;

                } else if (!oldtag.csize && !strstr(tag, "url=")) {
                    substrcat(url, tag, 4, tag.csize);
                    strcat(out, "<a href=\"");
                    outUrl(out, blog, url);
                    strcat(out, "\">");
                    url.cpop(url.csize);
                    flags |= F_URL;

                } else if (!oldtag.csize && tag == "html") {
                    flags |= F_HTML;

                } else if (oldtag.csize == tag.csize - 1 && tag[0] == '/' && strstr(tag, oldtag) == 1) {
                    out = oldout;

                    if (oldtag == "img") {
                        strcat(out, "<img src=\"");
                        outUrl(out, blog, url);
                        strcat(out, "\" />");

                    } else if (oldtag == "url") {
                        strcat(out, "<a href=\"");
                        outUrl(out, blog, url);
                        printf(out, "\">%s</a>", {url});

                    } else if (oldtag == "audio") {
                        strcat(out, "<audio controls><source src=\"");
                        outUrl(out, blog, url);
                        printf(out, "\" type=\"%s\"></audio>", {mimetype(mimeTypesTable, url)});

                    } else if (oldtag == "video") {

                        if (strstr(url, "youtube") >= 0 && (strstr(url, "v=") >= 0 || strstr(url, "/embed/") >= 0)) {
                            int p = strstr(url, "v=");
                            if (p < 0) p = strstr(url, "/embed/") + 5;
                            strcat(out, "<iframe src=\"https://www.youtube.com/embed/");
                            substrcat(out, url, p + 2, url.csize);
                            strcat(out, "\" width=640 height=480 frameborder=0 allowfullscreen></iframe>");

                        } else {
                            strcat(out, "<video width=\"640\" height=\"640\" controls poster=\"");
                            outUrl(out, blog, url);
                            out.cpop(3);
                            strcat(out, "jpg\"><source src=\"");
                            outUrl(out, blog, url);
                            printf(out, "\" type=\"%s\"></video>", {mimetype(mimeTypesTable, url)});
                        }                        
                    }

                    oldtag.cpop(oldtag.csize);
                    url.cpop(url.csize);

                } else if (tag == "/url" && (flags & F_URL)) {
                    strcat(out, "</a>");
                    flags &= ~F_URL;

                } else if (tag == "/html" && (flags & F_HTML)) {
                    flags &= ~F_HTML;

                } else {
                    begin -= tag.csize + 1;
                    out.cpush('[');
                }

            } else {
                begin -= tag.csize;
                out.cpush('[');
            }

        } else if (uni < 0x80) out.cpush(uni);
        else printutf8(out, uni);
    }

    return out.csize - size;
};

(volatile stateful blogObj blog, int iserr) -> () outEndHeader = {
    char out[], onsubmit[];

    if (blog.pubKey.csize)
        onsubmit = " onsubmit=\"return dfsrsa_crypt(document.login_form.p, document.login_form.y)\"";

    printf(out, "</a></td>
<td align=right valign=top>
<table border=0 cellspacing=0 cellpadding=0><tr><td valign=top>
<form action='/dsearch'>
<table border=0 cellspacing=0 cellpadding=0><tr><td valign=top>
<input type=hidden name=l value=9>
<input type=hidden name=f value='%s'>
<input type=text class=dsearch name=h size=20 placeholder='Поиск по сайту'>&nbsp;</td><td valign=top>
<input type=submit value='Найти' class=dsearch>&nbsp;&nbsp;</td></tr></table></form></td><td valign=top>
<form action='%s' method=POST name='login_form'%s>
<table border=0 cellspacing=0 cellpadding=0><tr><td valign=top>
<input type=hidden name=t value=\"%X\">
<input type=hidden name=y value=\"%s\">
<input type=text size=10 name=u class=dsearch placeholder='Логин'>&nbsp;</td><td valign=top>
<input type=password size=10 name=p class=dsearch placeholder='Пароль'>&nbsp;</td><td valign=top>
<input type=submit value='Войти' class=dsearch></td></tr></table></form></td></tr></table>
</td></tr>\n<tr><td><font face=Arial size=2><em>", {blog.server, blogRef(blog, "", 0), onsubmit, blog.pubKey, blog.postTime});

    if (iserr) {
        printf(out, "<a href=\"%s\">Наверх</a>", {blogRef(blog, "", 0)});

    } else {
        char action[] = "Обновить";
        if (blog.postTime || blog.mode == BLOG_SETUP || blog.mode == BLOG_REGISTER)
            action = "Наверх";

        printf(out, "<a class=h2ru>Вы вошли как %s.</a>&nbsp;&nbsp;<a href=\"%s\">%s</a>", {blog.users[0].name, blogRef(blog, "", 2), action});

        if (blog.mode != BLOG_SETUP && blog.mode != BLOG_REGISTER && !(blog.mode & BLOG_READONLY)) {
            action = "Написать";
            if (blog.postTime)
                action = "Ответить";

            printf(out, "&nbsp;&nbsp;<a onclick=\"document.getElementById('top').innerHTML=document.getElementById('bottom').innerHTML\"
style='color:blue; text-decoration:underline; cursor:pointer; cursor:hand;'>%s</a>", {action});

            if (blog.postTime && blog.users[0].name == blog.author && blog.users[0].name != "guest")
                printf(out, "&nbsp;&nbsp;<a href=\"%s\">Редактировать</a>", {blogRef(blog, "edit", 4)});
        }
    }

    printf(out, "</em></font></td>\n<td align=right><font face=Arial size=2><em>", {});

    if (!iserr && blog.users[0].name != "guest" && !(blog.mode & BLOG_READONLY)) {
        if (blog.mode != BLOG_SETUP)
            printf(out, "<a href=\"%s\">Настройки</a>&nbsp;&nbsp;", {blogRef(blog, "setup", 4)});

        printf(out, "<a href=\"%s\">Выйти</a>&nbsp;&nbsp;", {blogRef(blog, "", 0)});

    } else if (blog.mode != BLOG_REGISTER && !(blog.mode & BLOG_READONLY)) {
        int t = blog.postTime;
        blog.postTime = 0;
        printf(out, "<a href=\"%s\">Создать дневник</a>&nbsp;&nbsp;", {blogRef(blog, "register", 4)});
        blog.postTime = t;
    }

    printf(out, "<a href=\"/%s/guest/p/8796995CA\">Помощь</a></em></font></td></tr></table>\n<div id=top></div><hr>\n", {blog.program});

    outputp("", "", out);
    return;
}

(volatile stateful blogObj blog, const char header[], int withend) -> () outHeader = {
    char out[], err[];

    if (!header.csize) {
        (header, err) = blog.obj.methods.getEnvVar(blog.obj, blog.users[0].name, "header");
        if (err.csize || !header.csize) {
            char title[];
            printf(title, "Веблог пользователя %s", {blog.users[0].name});
            header = title;
        }
    }

    printf(out, "Content-Type: text/html;charset=utf-8\r\n\r\n", {});
    printf(out, "<!DOCTYPE html><html><head>
<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">
<title>%s</title>
<meta name=\"GENERATOR\" content=\"%s\">
<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\">
<script language=\"JavaScript\" src=\"/scripts/dfsrsa.js\"></script>
<script language=\"JavaScript\" src=\"/scripts/blog.js\"></script>\n", {header, version});

    int year, month, day, weekday, hour, min, sec, nanosec;
    (year, month, day, weekday, hour, min, sec, nanosec) = parse_time(blog.time, blog.timeOffset);
    if (month <= 2 || month == 12) {
        /* draw snow in winter */
        printf(out, "<script language=\"JavaScript\" src=\"/scripts/snowstorm.js\"></script>\n", {});
    }

    printf(out, "</head><body", {});

    if (blog.mode == BLOG_EDIT)
        printf(out, " onload=\"document.getElementById('top').innerHTML=document.getElementById('bottom').innerHTML\"", {});

    printf(out, ">\n<font face=Arial><table border=0 width=100%%><tr><td align=left valign=top><a class=h2>", {});

    if (withend)
        printf(out, "%s", {header});

    outputp("", "", out);

    if (withend)
        outEndHeader(blog, withend < 0);
    return;
};

(const char tag[], const char text[], const char rod[]) -> (const char str[]) insertObj = {
    char str[];
    printf(str, "<p><a href=\"javascript:blogInsObj(this, '%s', '%s')\"><img src=\"/images/blog/%s.png\" /><br>%s</a></p>",
          {tag, rod, tag, text});
    return str;
};

(volatile stateful blogObj blog) -> () outPostForm = {
    if (blog.mode & BLOG_READONLY)
        return;

    char out[];

    printf(out, "<div id=bottom>\n<hr>
<form enctype=\"multipart/form-data\" action=\"%s\" name=\"mess_form\" method=POST>
<input type=hidden name=u value=\"%s\">
<input type=hidden name=p value=\"%s\">
<input type=hidden name=t value=\"%X\">",
        {blogRef(blog, "", 0), blog.users[0].name, blog.users[0].password, blog.postTime});

    if (blog.mode == BLOG_EDIT) {
        char file[];
        if (blog.file.csize)
            printf(file, "/%s", {blog.file});
        printf(out, "<input type=hidden name=f value=\"save%s\">\n", {file});
    }

    printf(out, "<table border=0>
<tr><td align=right valign=top>
<font face=Arial size=2><em>Кому:</em></font></td>
<td><textarea cols=80 rows=1 name=r>", {});

    char recipients[], err[];
    (recipients, err) = blog.obj.methods.getEnvVar(blog.obj, blog.users[0].name, "recipients");

    if (recipients.csize && !err.csize) {
        printf(out, "%s", {recipients});
        if (blog.author.csize) {
            char users[][] = splitString(recipients, ", ");
            int i;
            for (i = 0; i < users.lsize && users[i] != blog.author; i += 1);
            if (i == users.lsize)
                printf(out, ", %s", {blog.author});
        }
    } else {
        printf(out, "%s", {blog.users[0].name});
        if (blog.author.csize && blog.users[0].name != blog.author)
            printf(out, ", %s", {blog.author});
        if (blog.users[0].name != "guest" && blog.author != "guest")
            printf(out, ", guest", {});
    }

    printf(out, "</textarea></td><td>&nbsp;</td></tr>\n<tr><td align=right valign=top><font face=Arial size=2><em>Тема:</em></font></td>
<td><textarea cols=80 rows=1 name=h>", {});

    if (blog.mode == BLOG_EDIT)
	outFile(out, blog, "header.txt", 1);

    printf(out, "</textarea></td><td>&nbsp;</td></tr>
<tr><td align=right valign=top><font face=Arial size=2><em>Сообщение:
<center><p><br>Вставить:</p>%s%s%s%s</center></em></font></td><td align=center><textarea rows=26 cols=80 name=m>",
        {insertObj("url", "ссылку", "ссылки"),
         insertObj("img", "картинку", "картинки"),
         insertObj("audio", "аудио", "аудио"),
         insertObj("video", "видео", "видео")});

    if (blog.mode == BLOG_EDIT) {
        if (blog.file.csize)
	    outFile(out, blog, blog.file, 1);
	else if (!outFile(out, blog, "html/index.htm", 1))
	    outFile(out, blog, "message.txt", 1);
    }

    char action[] = "Отправить";
    if (blog.mode == BLOG_EDIT)
        action = "Сохранить";
    printf(out, "</textarea><br><input type=submit value=\"%s\"></td>", {action});

    printf(out, "<td align=left valign=top><font face=Arial size=2><em><a href=\"/%s/guest/p/7DE075492/html/index.htm\">Инструкция</a>
по html-сообщениям и вложениям</em></font><p><font face=Arial size=2><em>Загрузить в качестве сообщения файл html:</em></font><br>
<input type=file size=40 name=l></p><p><font face=Arial size=2><em>Загрузить контент (картинки, аудио, видео...):</em></font><br>
<input type=file size=40 name=O><br>
<input type=file size=40 name=P><br>
<input type=file size=40 name=Q><br>
<input type=file size=40 name=R></p><p><font face=Arial size=2><em>Загрузить вложения к сообщению:</em></font><br>
<input type=file size=40 name=A><br>
<input type=file size=40 name=B><br>
<input type=file size=40 name=C><br>
<input type=file size=40 name=D></p></td></tr></table></form></div>\n", {blog.program});

    outputp("", "", out);
    return;
};

(volatile stateful blogObj blog) -> () outFooter = {
    char out[];

    printf(out, "<hr>\n<font face=Arial size=2><em>Страница создана программой %s,
<a href=\"/%s/guest/p/8E99E5568\">исходные тексты и установка</a>.</em></font>\n</font></body></html>\n", {version, blog.program});

    outputp("", "", out);
    return;
};

(volatile stateful char out[], const char str[]) -> () outTip = {
    const int offsets[] = {0, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x410, 0x420, 0x430, 0xB0, 0xC0, 0xD0, 0x440, 0xF0};
    int i, size = str.csize, count = 0;
    strcat(out, " - ");
    for (i = 0; i < size; i += 1) {
        int c = str[i];
        if (c == 0) {
            if (count >= 2) return;
            out.cpush(' '), out.cpush('-');
            count += 1;
            c = ' ';
        } else if (c < ' ') c = ' ';
        else if (c == '<') strcat(out, "&lt"), c = ';';
        else if (c == '>') strcat(out, "&gt"), c = ';';
        else if (c == 0xf0) c = 0x401;
        else if (c == 0xf1) c = 0x451;
        else if (c >= 0xc0 && c <= 0xdf && i + 1 < size && str[i + 1] >> 6 == 2) i += 1, c = (c & 0x1f) << 6 | str[i] & 0x3f;
        else if (c >= 0x80) c = offsets[c >> 4] + (c & 0xf);
        printutf8(out, c);
    }
    strcat(out, "...");
    return;
};

(volatile stateful blogObj blog, const char error[]) -> () outError = {
	char mess[];
	if (error.csize)
		printf(mess, "Возникла ошибка: %s.", {error});
	else
		printf(mess, "Возникла ошибка. Возможно, неверный логин %s или пароль.", {blog.users[0].name});

	outHeader(blog, mess, -1);
	outFooter(blog);
	return;
};

(volatile stateful blogObj blog, const char message[]) -> () outSuccess = {
	char mess[];
	printf(mess, "Действие выполнено: %s.", {message});

	outHeader(blog, mess, -1);
	outFooter(blog);
	return;
};

(volatile stateful char out[], volatile stateful blogObj blog, int userN, int pos) -> () outListItem = {
	blogUser user = blog.users[userN >> 1];
	int file[], tip[];

	if (userN & 1)
		file = user.blogFile, tip = user.tipFile;
	else
		file = user.inboxFile, tip = user.tipboxFile;

	int time = file[pos] | file[pos + 1] << 32;
	blog.postTime = time;
	printf(out, "<li><a href=\"%s\">", {blogRef(blog, "", 3)});
	blog.postTime = 0;
	strftime(out, "%d.%m.%Y %H:%M</a>", teObj.utilities.teTime2Time(time), blog.timeOffset);
	int tipPos = (pos << 1) - ((userN & 1) << 7);

	if (tipPos + 16 <= tip.isize) {
		const char styles[][] = { "new", "en" };
		printf(out, " <a class='%s'>", {styles[userN & 1]});
		outTip(out, ints32_2chars(tip, tipPos, tipPos + 16));
		printf(out, "</a>", {});
	}

	printf(out, "</li>\n", {});
	return;
};

(volatile stateful blogObj blog) -> () outList = {
    int sorted[], n;
    char out[], err[];

    if (!(blog.postTime >> 32)) {
        n = blog.postTime;
        blog.postTime = 0;
    }

    outHeader(blog, "", 1);

    char favorites[];
    (favorites, err) = blog.obj.methods.getEnvVar(blog.obj, blog.users[0].name, "favorites");
    if (favorites.csize && !err.csize) {
        char times[][] = splitString(favorites, ", ");
        int i, printed;
        for (i = 0; i < times.lsize; i += 1) {
            int time, error, next;
            (time, error, next) = strtoi(times[i], 0, times[i].csize, 16);
            if (!error) {
                int userN, pos;
                (err, userN, pos) = blog.obj.methods.findMessage(blog.obj, time);
                if (!err.csize) {
                    if (!printed)
                        printf(out, "<ul>\n", {});
		    outListItem(out, blog, userN, pos);
                    printed += 1;
                }
            }
        }

        if (printed)
            printf(out, "</ul>\n<hr>\n", {});
    }

    outputp("", "", out);
    char out1[];
    out = out1;

    (sorted, err) = blog.obj.methods.sortMessages(blog.obj, n * OUT_MAX, (n + 1) * OUT_MAX);
    int i, size = sorted.isize, printed;
    if (err.csize)
        size = 0;

    for (i = 0; i < size; i += 1) {
        if (sorted[i] == -1)
            printf(out, "<ul>\n", {});
        else if (sorted[i] == -2)
            printf(out, "</ul>\n", {});
        else if (i + 1 < size) {
	    outListItem(out, blog, sorted[i + 1], sorted[i]);
            i += 1;
            printed += 1;
        }
    }

    printf(out, "<p>", {});
    if (printed == OUT_MAX) {
        blog.postTime = n + 1;
        printf(out, "<a href=\"%s\">Предыдущие</a>&nbsp;&nbsp;", {blogRef(blog, "", 3)});
        blog.postTime = 0;
    }
    if (n) {
        blog.postTime = n - 1;
        printf(out, "<a href=\"%s\">Следующие</a>&nbsp;&nbsp;", {blogRef(blog, "", 3)});
        blog.postTime = 0;
        printf(out, "<a href=\"%s\">Наверх</a>", {blogRef(blog, "", 3)});
    }
    printf(out, "</p>", {});

    outputp("", "", out);

    outPostForm(blog);
    outFooter(blog);
    return;
};

int MAX_COUNT = 10;
int MAX_LEN = 160;

type listDirData = {
    volatile stateful blogObj blog;
    const char dir[];
    int count;
    int period;
    int len;
};

(volatile stateful any data, const char fileName[], const dfsFileAttributes attr, const char error[]) -> () listDirCallback = {
    any from;
    listDirData to[];
    from.lpush(data);
    objcopyto(to, from);
    listDirData d = to[0];

    char out[];
    if (error.csize || !fileName.csize) {
        if (d.count)
            printf(out, "</tr></table>\n<hr>\n", {});
        else if (d.dir == "attachments") {
            d.dir = "content";
            d.blog.obj.methods.readMessageDir(d.blog.obj, d, code, d.dir, 0, (1 << 63) - 1);
            return;
        }

	if (!outFile(out, d.blog, "message.txt", 0))
            printf(out, "<iframe src=\"%s\" height=800 width=100%% frameborder=0>\n</iframe>\n", {blogRef(d.blog, "html/index.htm", 4)});
        outputp("", "", out);

        outPostForm(d.blog);
        outFooter(d.blog);
        return;
    }

    if (fileName == "." || fileName == "..")
        return;

    if (!d.count) {
        printf(out, "<h4>&nbsp;Вложения:", {});
        if (d.dir != "attachments" && d.dir != "content") {
            out.cpush(' ');
            encodeText(out, d.dir);
            out.cpush('/');
        }
        printf(out, "</h4>\n<table border=\"0\" cellpadding=\"3\"><tr>\n", {});
    }

    if (!d.period) {
        if (d.count >= MAX_COUNT)
            d.period = d.count;
        else {
            d.len += fileName.csize + 5 + ((attr.mode & DFS_IFMT) == DFS_IFDIR);
            if (attr.size)
                d.len += flog(attr.size) / flog(10);
            if (d.len > MAX_LEN) {
                if (d.count)
                    d.period = d.count;
                else
                    d.period = 1;
            }
        }
    }

    if (d.period && d.count && !(d.count % d.period))
        printf(out, "</tr><tr>\n", {});

    d.count += 1;

    printf(out, "<td><a href=\"%s/", {blogRef(d.blog, d.dir, 4)});
    encodeUrl(out, fileName);
    strcat(out, "\">");
    encodeText(out, fileName);
    if ((attr.mode & DFS_IFMT) == DFS_IFDIR)
        out.cpush('/');
    printf(out, "</a>&nbsp;<font color=#AAAAAA>(%d)</font></td>\n", {attr.size});

    outputp("", "", out);
    return;
};

(volatile stateful blogObj blog) -> () outMessage = {
    char out[], out1[], title[];

    printf(title, "%s: просмотр записи автора %s", {blog.users[0].name, blog.author});
    outHeader(blog, title, 0);

    outFile(out, blog, "header.txt", 0);
    printf(out, "</a><br>\n<a class=\"h2ru\">пишет %s ", {blog.author});
    strftime(out, "%d.%m.%Y %H:%M", teObj.utilities.teTime2Time(blog.postTime), blog.timeOffset);
    outputp("", "", out);

    outEndHeader(blog, 0);

    char dir[] = blog.fileName;
    if (!dir.csize)
        dir = "attachments";

    listDirData d = {blog, dir};

    blog.obj.methods.readMessageDir(blog.obj, d, listDirCallback, dir, 0, (1 << 63) - 1);
    return;
};

(volatile stateful blogObj blog, const char path[], const char file[]) -> () outFileHeader = {
	char mime[] = mimetype(mimeTypesTable, path);
	int pos = strstr(mime, "utf-8");
	if (pos >= 0) {
		int begin, end = file.csize, uni;
		while (begin < end) {
			(uni, begin) = scanutf8(file, begin, end);
			if (uni < 0 && (end & 0x1ff || end - begin >= 4)) {
				const char asciiSmallBigTable[256] = photostat_kindnesses_silken;
				char codetable[] = "cp866";
				if (strstrtable(file, "windows-1251", asciiSmallBigTable) >= 0)
					codetable = "windows-1251";
				char m[];
				substrcat(m, mime, 0, pos);
				strcat(m, codetable);
				substrcat(m, mime, pos + codetable.csize, mime.csize);
				mime = m;
				begin = end;
			}
		}
	}

	char out[];
	printf(out, "Content-Type: %s", {mime});
	int size = blog.rangeEnd - blog.rangeBegin;
	if (size < 0)
		size = 0;
	printf(out, "\r\nContent-Length: %d", {size});
	if (blog.fileMtime)
		strftime(out, "\r\nLast-Modified: %a, %d %b %Y %H:%M:%S GMT", blog.fileMtime, 0);
	printf(out, "\r\nAccept-Ranges: bytes", {});

	if (blog.rangeBegin || blog.rangeEnd < blog.fileSize) {
		if (!size)
			printf(out, "\r\nContent-Range: bytes */0", {});
		else {
			printf(out, "\r\nContent-Range: bytes %d-%d/%d", {blog.rangeBegin, blog.rangeEnd - 1, blog.fileSize});
			printf(out, "\r\nStatus: 206 Partial Content", {});
		}
	}

	printf(out, "\r\n\r\n", {});
	outputp("", "", out);
	return;
};

blogEnvVar blogEnvVars[] = {
	{"h", "header",		"Заголовок дневника",			"Веблог пользователя %s"},
	{"r", "recipients",	"Список получателей сообщений",		"%s, guest"},
	{"s", "subscribe",	"Подписка на другие дневники",		"guest"},
	{"d", "redirect",	"Перенаправление на другие дневники",	" "},
	{"v", "favorites",	"Список избранных записей",		" "},
	{"z", "timezone",	"Часовой пояс",				"+3"}
};

(volatile stateful blogObj blog) -> () outEnviron = {
	char out[];

	outHeader(blog, "Настройки дневника", 1);

	printf(out, "<form enctype=\"multipart/form-data\" action=\"%s\" method=POST>
<input type=hidden name=u value=\"%s\">
<input type=hidden name=p value=\"%s\">
<input type=hidden name=f value=\"set\">
<table border=0>\n",
		  {blogRef(blog, "", 0), blog.users[0].name, blog.users[0].password});

	int i;
	for (i = 0; i < blogEnvVars.lsize; i += 1) {
		blogEnvVar var = blogEnvVars[i];
		printf(out, "<tr><td align=right valign=top><font face=Arial size=2><em>%s:</em></font></td><td><textarea cols=100 rows=1 name=%s>", {var.description, var.name});
		char value[], err[];
		(value, err) = blog.obj.methods.getEnvVar(blog.obj, blog.users[0].name, var.varName);
		if (err.csize) {
			char v[];
			printf(v, var.defaultValue, {blog.users[0].name});
			value = v;
		}
		printf(out, "%s</textarea></td></tr>\n", {value});
	}

	printf(out, "<tr><td>&nbsp;</td><td align=center><input type=submit value=\"Сохранить\"></td></tr></table></form>
<hr><h4>Изменение пароля</h4>
<form enctype=\"multipart/form-data\" action=\"%s\" method=POST name=\"reg_form\"
onsubmit=\"if(document.reg_form.w.value!=document.reg_form.y.value){alert('Пароли различны!');return false;}document.reg_form.y.value='';return ",
		{blogRef(blog, "", 0)});

	if (blog.pubKey.csize)
		printf(out, "dfsrsa_crypt(document.reg_form.p, document.login_form.y) && dfsrsa_crypt(document.reg_form.w, document.login_form.y)", {});
	else
		printf(out, "true", {});

	printf(out, "\">
<input type=hidden name=u value=\"%s\">
<input type=hidden name=f value=\"changepwd\">
<table border=0>
<tr><td align=right valign=top><font face=Arial size=2><em>Старый пароль:</em></font></td>
<td><input type=password size=56 name=p value=\"\"></td></tr>
<tr><td align=right valign=top><font face=Arial size=2><em>Новый пароль:</em></font></td>
<td><input type=password size=56 name=w value=\"\"></td></tr>
<tr><td align=right valign=top><font face=Arial size=2><em>Повторите новый пароль:</em></font></td>
<td><input type=password size=56 name=y value=\"\"></td></tr><tr><td>&nbsp;</td><td align=center>
<input type=submit value=\"Изменить пароль\"></td></tr></table></form>\n",
		{blog.users[0].name});

	outputp("", "", out);
	outFooter(blog);
	return;
};

(volatile stateful blogObj blog) -> () outRegForm = {
	char out[];

	outHeader(blog, "Создание нового дневника", 1);

	printf(out, "<form enctype=\"multipart/form-data\" action=\"%s\" method=POST name=\"reg_form\"
onsubmit=\"if(document.reg_form.p.value!=document.reg_form.w.value){alert('Пароли различны!');return false;}document.reg_form.w.value='';return ",
		{blogRef(blog, "", 0)});

	if (blog.pubKey.csize)
		printf(out, "dfsrsa_crypt(document.reg_form.p, document.login_form.y)", {});
	else
		printf(out, "true", {});

	printf(out, "\">
<input type=hidden name=f value=\"mkuser\">
<table border=0>
<tr><td align=right valign=top><font face=Arial size=2><em>Логин:</em></font></td>
<td><input type=text size=56 name=u value=\"\"></td></tr>
<tr><td align=right valign=top><font face=Arial size=2><em>Пароль:</em></font></td>
<td><input type=password size=56 name=p value=\"\"></td></tr>
<tr><td align=right valign=top><font face=Arial size=2><em>Повторите пароль:</em></font></td>
<td><input type=password size=56 name=w value=\"\"></td></tr>
<tr><td>&nbsp;</td><td align=center>
<input type=submit value=\"Создать дневник\"></td></tr>
</table></form>\n", {});

	outputp("", "", out);
	outFooter(blog);
	return;
};

(volatile stateful blogObj blog) -> () outSpecialPage = {
	if (blog.mode & BLOG_READONLY)
		;
	else if (blog.mode == BLOG_SETUP)
		outEnviron(blog);
	else if (blog.mode == BLOG_SET) {
		char err[] = blogActionObj.setEnvironment(blog, blogEnvVars);
		if (err.csize) outError(blog, err);
		else outSuccess(blog, "настройки сохранены");
	} else if (blog.mode == BLOG_CHANGEPWD) {
		char err[] = blogActionObj.changePassword(blog);
		if (err.csize) outError(blog, err);
		else outSuccess(blog, "пароль изменён");
	} else if (blog.mode == BLOG_REGISTER) {
		outRegForm(blog);
	} else if (blog.mode == BLOG_MKUSER) {
		char err[] = blogActionObj.makeUser(blog, blogEnvVars);
		if (err.csize) outError(blog, err);
		else outSuccess(blog, "блог создан");
	}
	return;
};

blogOutClass blogOutObj = {
	outError,
	outList,
	outMessage,
	outFileHeader,
	outSpecialPage
};
