/* forex class, public header, T19.744-T20.179; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.1, T19.354-T19.744 */

#include "forexConstants.dpvmh"

type inputFile = {
	const char name[];
	int minTimeGap;
	int maxTimeGap;
	int pos;
	int line;
	int bytes;
	int values;
};

int FLAGS_OUTPUTS_12		= 0;
int FLAGS_OUTPUTS_01		= 1;
int FLAGS_OUTPUTS_02		= 2;
int FLAGS_OUTPUTS_MASK		= 3;

int FLAGS_TEST_LAYER_OFFSET	= 4;
int FLAGS_TEST_LAYER_MASK	= 0xf;

int FLAGS_CALIBRATION_OFFSET	= 8;
int FLAGS_CALIBRATION_MASK	= 0xf;

int CALIBRATION_ALGO_MO_O	= 0;	/* [-1,1] with last price 0 */
int CALIBRATION_ALGO_Z_O	= 1;	/* [0,1] */
int CALIBRATION_ALGO_NO		= 2;	/* no calibration */
int CALIBRATION_ALGO_END	= 3;

int BALANCE_TYPE_FREE		= 1;
int BALANCE_TYPE_ORDERS		= 2;
int BALANCE_TYPE_TOTAL		= 3;

int STAT_AVERAGE		= 0;
int STAT_MIN			= 1;
int STAT_MAX			= 2;
int STAT_FIRST			= 3;
int STAT_LAST			= 4;

type forexOrder = {
	const (volatile stateful any forexObj, const stateful any order, int action) -> () callback;
	volatile any data;
	const char txid[];
	int id;
	int orderType;
	int currencyFrom;
	int currencyTo;
	int expirationTime;
	float amount;
	float rate;
	float maxRate;
};

int ORDER_ACTION_CREATED	= 0;
int ORDER_ACTION_EXECUTED	= 1;
int ORDER_ACTION_EXPIRED	= 2;
int ORDER_ACTION_CANCELED	= 3;
int ORDER_ACTION_END		= 4;

/* syncExchange flags */
int SYNC_SET_TEST_ALL		= 1;	/* set all test prices to exchange (default is last price only) */
int SYNC_CANCEL_ALL		= 2;	/* cancel all exicting orders */
int SYNC_SHOW_STAT		= 4;	/* show statistics */

type forexMethods = {
	const char version[];
	const (const stateful any forexObj) -> (const char error[], int flags) getFlags;
	const (volatile stateful any forexObj, int flags) -> (const char error[]) setFlags;
	const (volatile stateful any forexObj, const stateful any registry) -> (const char error[]) setRegistry;
	const (const stateful any forexObj) -> (const char error[], int time) getCurrentTime;
	const (const stateful any forexObj) -> (const char error[], int nEntries) getInputDataEnd;
	const (const stateful any forexObj, int nEntries) -> (const char error[]) setInputDataEnd;
	const (const stateful any forexObj, int currency, int balanceType) -> (const char error[], float amount) getBalance;
	const (volatile stateful any forexObj, int currency, float amount) -> (const char error[]) addBalance;
	const (const stateful any forexObj, int currencyBase, int currency) -> (const char error[], float rate)
		getCurrentRate;
	const (const stateful any forexObj, int statMethod, int currencyBase, int currency, int begin, int end)
		-> (const char error[], float rate) getRateStatistics;
	const (const stateful any forexObj) -> (const char error[], int openOrders, int maxOpenOrders,
		int pendingClosedOrders, int closedOrders) getOrdersStatistics;
	const (volatile stateful any forexObj, const (const any data, const stateful float inputData[], int end,
		int inputDataSize) -> (int output) callback, const any data) -> (const char error[]) setOutputCallback;
	const (volatile stateful any forexObj, const char exchangeName[], const char publicKey[], const char privateKey[],
		const char currencies[][]) -> (const char error[]) setExchange;
	const (const stateful any forexObj, const char mess[], int level) -> () logOutput;
	const (volatile stateful any forexObj, const char logFile[], int taskId) -> (const char error[]) runLogger;
	const (volatile stateful any forexObj, const (volatile stateful any data, const char error[]) -> () callback,
		volatile stateful any data, int flags) -> () syncExchange;
	const (volatile stateful any forexObj, int orderType, int currencyFrom, int currencyTo, int expirationTimeFromNow,
		float amount, float rate) -> (const char error[]) putOrder;
	const (volatile stateful any forexObj, volatile stateful forexOrder order) -> (const char error[]) putOrderExt;
	const (volatile stateful any forexObj, int orderId) -> (const char error[]) cancelOrder;
	const (volatile stateful any forexObj, const (volatile stateful any data, const char error[]) -> () callback,
		volatile stateful any data, volatile stateful inputFile f, int nCurrency) -> () readCryptoLog;
	const (volatile stateful any forexObj, const (volatile stateful any data, const char error[]) -> () callback,
		volatile stateful any data, volatile stateful inputFile f, int inputValuesPerSlot) -> () readCsvData;
	const (volatile stateful char out[], volatile stateful any forexObj, int graphX, int graphY) ->
		(const char error[]) dump;
	const (volatile stateful any forexObj, const char neuronNet[], const stateful float training_params[],
		int testPart, int trainingCycles, int neuronFlags) -> (const char error[]) neuronTraining;
};

type forexClass = {
	volatile any data;
	const forexMethods methods;
};
