/* forex class */

int _Z = 0;
#include "../../../common/sysParams.dpvmh"
#include "../../../lib/stdlib/stdlib.dpvmake"
#include "../../../lib/utils/utils.dpvmake"
#include "../forex.dpvmake"

const char version[] = "logTraining demo, T19.772-T19.777"; /* $DVS:time$ */

type constDemoData = {
	const any demo;
	const any registry;
	const char logName[];
	const char fileName[];
	const char neuronNet[];
	const float training_params[];
	int nCurrency;
	int graphX;
	int graphY;
	int testPart;
	int trainingCycles;
	int neuronFlags;
};

type demoData = {
	const constDemoData cd;
	volatile forexClass forexObj;
	volatile stateful inputFile fl;
};

(volatile stateful any data, const char error[]) -> () callback = {
	demoData darr[];
	pushObject(data, darr);
	demoData d = darr[0];
	int level = 7;

	char out[];
	if (error.csize)
		printf(out, "%s\r\n", {error}), level = 4;

	error = d.forexObj.methods.dump(out, d.forexObj, d.cd.graphX, d.cd.graphY);
	if (error.csize)
		printf(out, "%s\r\n", {error}), level = 4;

	d.forexObj.methods.logOutput(d.forexObj, out, level);

	error = d.forexObj.methods.neuronTraining(d.forexObj, d.cd.neuronNet, d.cd.training_params,
			d.cd.testPart, d.cd.trainingCycles, d.cd.neuronFlags);

	char out1[];
	if (error.csize)
		printf(out1, "%s\r\n", {error});
	else
		printf(out1, "Training finished.\r\n", {});

	d.forexObj.methods.logOutput(d.forexObj, out1, 1);
	return;
};

(const constDemoData cd, const int values[]) -> () fork = {
	inputFile f = {cd.fileName};
	demoData d = {cd, forexCreate(), f};

	char error[] = d.forexObj.methods.setRegistry(d.forexObj, cd.registry);
	if (error.csize) {
		d.forexObj.methods.logOutput(d.forexObj, error, 1);
		return;
	}

	error = d.forexObj.methods.runLogger(d.forexObj, cd.logName, values[0]);
	if (error.csize) {
		d.forexObj.methods.logOutput(d.forexObj, error, 1);
		return;
	}

	char out[];
	printf(out, "Starting %s (%p) based on %s", {version, cd.demo, d.forexObj.methods.version});
	d.forexObj.methods.logOutput(d.forexObj, out, 6);

	d.forexObj.methods.readCryptoLog(d.forexObj, callback, d, f, d.cd.nCurrency);
	return;
};

(const any registry, const char logname[], const char filename[], const char neuronNet[], const float training_params[],
		int nCurrency, int graphX, int graphY, int testPart, int trainingCycles, int neuronFlags)
		-> () logTraining = {
	constDemoData cd = {code, registry, logname, filename, neuronNet, training_params, nCurrency, graphX, graphY,
		testPart, trainingCycles, neuronFlags};

	const int vars[] = {DPVM_SYS_PARAM_ID};
	getsysp(fork, cd, vars);
	return;
};
