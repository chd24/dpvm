/* kraken class */

int _Z = 0;
#include "../../../../../common/sysParams.dpvmh"
#include "../../../../../common/taskFlags.dpvmh"
#include "../../../../../lib/stdlib/stdlib.dpvmake"
#include "../../../../../lib/utils/utils.dpvmake"
#include "../../../../../lib/input/demo/demo.dpvmake"
#include "../kraken.dpvmake"

char version[] = "getBalances demo 0.1.2, T19.996-T20.329"; /* $DVS:time$ */

type getBalancesData = {
	const char publicKey[];
	const char currencies[][];
	volatile stateful krakenClass krakenObj;
	volatile float out[];
};

(volatile stateful any d, const char error[]) -> () getCallback = {
	getBalancesData darr[];
	pushObject(d, darr);
	getBalancesData data = darr[0];

	char text[];
	if (error.csize)
		printf(text, "%s\r\n", {error});
	else {
		int i;
		for (i = 0; i < data.currencies.lsize; i += 1)
			printf(text, "%-4s: total = %11.6f, hold = %11.6f\r\n", {data.currencies[i],
				data.out[i * BALANCE_END + BALANCE_TOTAL] + 0.0000004,
				data.out[i * BALANCE_END + BALANCE_HOLD ] + 0.0000004});
	}

	outputp("", "", text);
	return;
};

(volatile stateful getBalancesData data, const char text[], int status) -> () inputCallback = {
	char error[];
	if (status <= 0)
		error = "Error: empty private key.";
	else
		error = data.krakenObj.methods.setKey(data.krakenObj, data.publicKey, text);

	if (error.csize) {
		outputp("", "", error);
		outputp("", "", "\r\n");
		return;
	}

	data.krakenObj.methods.getBalances(data.out, data.krakenObj, getCallback, data, data.currencies);
	return;
};

(volatile stateful any data, const char text[], int status) -> () inputCallbackHelper = {
	getBalancesData arr[];
	pushObject(data, arr);
	return inputCallback(arr[0], text, status);
};

(const char publicKey[], const char currencies[][]) -> () getBalances = {
	krakenClass krakenObj = krakenCreate();
	getBalancesData data = {publicKey, currencies, krakenObj};

	const int vars[] = {DPVM_SYS_PARAM_FLAGS};
	const int flags = DPVM_TASK_FLAG_NO_INPUT_HISTORY + DPVM_TASK_FLAG_NO_INPUT_ECHO;
	const int values[] = {flags};
	setsysp("", "", vars, values);

	outputp("", "", "Private key: ");

	inputExt(inputCallbackHelper, data, 256, -1);
	return;
};
