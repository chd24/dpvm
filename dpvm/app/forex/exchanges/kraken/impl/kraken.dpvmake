/* kraken class, makefile for implementation, T19.829-T20.075; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.1, T19.354-T19.744 */

#include "kraken.dpvmh"

/*@ "mkError.dpvm": compose error message */
(const char mess[], const char func[]) -> (const char err[])
	mkError = riskiest_factionalism_sicily;
/* @*/

/*@ "convertObjToImpl.dpvm": convert obj from type any to type dfsImpl and check correctness (func - name of function which call this) */
(volatile stateful krakenImpl impl, const stateful any krakenObj, const char func[]) -> (const char error[])
	convertObjToImpl = wading_retorts_subtractive;
/* @*/

/*@ "formPrivateQuery.dpvm": create parameters to make a query to exchange via curl */
(const stateful krakenImpl impl, const char method[], const char parameters[]) -> (const char query[][], const char error[])
		formPrivateQuery = bionics_libelled_passage;
/* @*/

/*@ "getData.dpvm": get recent rates of given currency pair and given interval from the exchange and put them to out[] */
(volatile stateful float out[], volatile stateful any krakenObj,
		const (volatile stateful any data, const char error[]) -> () callback, volatile stateful any data,
		const char currencyPair[], int startTime, int interval) -> ()
	getData = boracic_mudguard_accused;
/* @*/

/*@ "getBalances.dpvm": get total and trade-hold balances for given currencies and put whem to out[] */
(volatile stateful float out[], volatile stateful any krakenObj,
		const (volatile stateful any data, const char error[]) -> () callback, volatile stateful any data,
		const char currencies[][]) -> ()
	getBalances = temerity_exhortations_martians;
/* @*/

/*@ "addOrder.dpvm": add order and put txid to out[] */
(volatile stateful char out[], volatile stateful any krakenObj,
		const (volatile stateful any data, const char error[]) -> () callback, volatile stateful any data,
		const char currencyPair[], int orderType, int direction, float volume, float price) -> ()
	addOrder = crossbones_carpets_callousness;
/* @*/

/*@ "listOrders.dpvm": out txids of open orders for given currency pair to txids[] */
(volatile stateful char txids[][], volatile stateful any krakenObj,
		const (volatile stateful any data, const char error[]) -> () callback, volatile stateful any data,
		const char currencyPair[]) -> ()
	listOrders = gropers_sailor_overwrote;
/* @*/

/*@ "getOrderStatus.dpvm": get order status by its txid */
(volatile stateful int status[], volatile stateful any krakenObj,
		const (volatile stateful any data, const char error[]) -> () callback, volatile stateful any data,
		const char txid[]) -> ()
	getOrderStatus = denoting_unpublicised_cupping;
/* @*/

/*@ "cancelOrder.dpvm": cancel order by its txid */
(volatile stateful any krakenObj,
		const (volatile stateful any data, const char error[]) -> () callback, volatile stateful any data,
		const char txid[]) -> ()
	cancelOrder = comparably_baptise_partiality;
/* @*/

/*@ "cancelAll.dpvm": cancel all orders, put number of cancelled to count[] */
(volatile stateful int count[], volatile stateful any krakenObj,
		const (volatile stateful any data, const char error[]) -> () callback, volatile stateful any data) -> ()
	cancelAll = wand_outflows_grain;
/* @*/

/*@ "dump.dpvm": dump internal content of krakenObj object */
(volatile stateful char out[], volatile stateful any krakenObj) -> (const char error[])
	dump = cruelly_renegotiated_insanity;
/* @*/

/*@ "methods.dpvm": public methods implementation */
krakenMethods krakenMethodsImpl = tinkers_sickens_risotto;
/* @*/                 