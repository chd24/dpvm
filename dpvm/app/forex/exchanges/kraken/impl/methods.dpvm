/* kraken class, methods implementation, T19.829-T20.075; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.1, T19.354-T19.744 */

#include "../../../../../tools/registry/registry.dpvmake"
#include "../../../../../lib/math/crypto/hmac/hmac.dpvmake"
#include "../../../../../lib/math/crypto/base64/base64.dpvmake"
#include "kraken.dpvmake"
#include "version.dpvmh"

int registryMask = REGISTRY_COMPILER;	/* mask of registry applications used by kraken class */

(volatile stateful any krakenObj) -> (const char error[], int flags) getFlags = {
	krakenImpl impl;
	char err[] = convertObjToImpl(impl, krakenObj, "getFlags");
	if (err.csize) return (err, 0);

	return ("", impl.data.flags);
};

(volatile stateful any krakenObj, int flags) -> (const char error[]) setFlags = {
	krakenImpl impl;
	char err[] = convertObjToImpl(impl, krakenObj, "setFlags");
	if (err.csize) return err;

	impl.data.flags = flags;
	return "";
};

(volatile stateful any krakenObj, const stateful any registry) -> (const char error[]) setRegistry = {
	krakenImpl impl;
	char err[] = convertObjToImpl(impl, krakenObj, "setRegistry");
	if (err.csize) return err;

	registryData registryCopy = registryObj.copy(registry);
	err = registryObj.check(registryCopy, registryMask);
	if (err.csize) return err;

	impl.data.registry = registryCopy;
	impl.data.registrySet = 1;
	return "";
};

(volatile stateful any krakenObj, const char publicKey[], const char privateKey[]) -> (const char error[]) setKey = {
	krakenImpl impl;
	char err[] = convertObjToImpl(impl, krakenObj, "setKey");
	if (err.csize) return err;

	hmacClass hmac_sha256 = hmacCreate();
	err = hmac_sha256.methods.setHash(hmac_sha256, "SHA-256");
	if (err.csize) return err;

	hmacClass hmac_sha512 = hmacCreate();
	err = hmac_sha512.methods.setHash(hmac_sha512, "SHA-512");
	if (err.csize) return err;

	char decodedKey[];
	base64_decode_str(decodedKey, privateKey, 0);
	err = hmac_sha512.methods.setKey(hmac_sha512, decodedKey);
	if (err.csize) return err;

	impl.data.hmac_sha256 = hmac_sha256;
	impl.data.hmac_sha512 = hmac_sha512;
	impl.data.publicKey = publicKey;
	impl.data.keySet = 1;
	return "";
};

(volatile stateful any krakenObj, float price) -> (const char error[]) setTestPrice = {
	krakenImpl impl;
	char err[] = convertObjToImpl(impl, krakenObj, "setTestPrice");
	if (err.csize) return err;

	return mkError("not implemented", "setTestPrice");
};

krakenMethods krakenMethodsImpl = {
	version,
	getFlags,
	setFlags,
	setRegistry,
	setKey,
	setTestPrice,
	getData,
	getBalances,
	addOrder,
	listOrders,
	getOrderStatus,
	cancelOrder,
	cancelAll,
	dump
};
