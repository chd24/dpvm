/* forex class, internal header, T19.744-T20.081; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.1, T19.354-T19.744 */

#include "../../../tools/registry/registry.dpvmh"
#include "../../../lib/math/neuron/neuron.dpvmh"
#include "../exchanges/exchange.dpvmh"
#include "../forex.dpvmh"

type forexAddress = {
	const char version[];
	int taskId;
	int serviceId;
};

int FOREX_ADDR_LOGGER = 1;

type forexMessage = {
	const char message[];
	int messageId;
	int threadId;
	int level;
};

int FOREX_MESS_LOG = 1;

type forexPrediction {
	int endSample;
	float output0;
	float output1;
};

int N_OUTPUTS = 4;

type forexData = {
	const registryData registry;		/* system registry */
	volatile float inputData[];		/* input data: currency prices in linearly growing moments of time */
	volatile neuronClass neuronObj;		/* neuron net */
	const (const any data, const stateful float inputData[], int end, int inputdataSize) -> (int output)
		outputCallback;			/* callback to produce output used in neuron net training */
	const any outputCallbackData;		/* private data for output callback */
	volatile int count[N_OUTPUTS..][2..];	/* total number of training/test rounds for outputs -1/0/1 */
	volatile int success[N_OUTPUTS..][2..];	/* total number of training/test success rounds for outputs -1/0/1 */
	volatile float result[N_OUTPUTS..][2..];/* total sum of training/test rounds results for outputs -1/0/1 */
	volatile exchangeClass exchange;	/* real exchange to send orders and query balances */
	volatile forexOrder orders[];		/* active orders */
	volatile forexOrder closedOrders[];	/* closed orders pending closing on exchange */
	const char currencies[][];		/* names of used crypto in the exchange */
	volatile float balance[2..];		/* balances in USD and used crypto */
	volatile int stats[ORDER_DIRECTION_END..][ORDER_ACTION_END..][ORDER_TYPE_END..]; /* stats for order actions */
	volatile forexPrediction predictions[]; /* array of predictions waiting for time of correctness test */
	int flags;				/* flags */
	int taskId;				/* task id set via function runLogger */
	int registrySet;			/* 1 if registry set */
	int exchangeSet;			/* 1 if exchange set */
	int loggerRun;				/* 1 if logger is running */
	int neuronNetInited;			/* 1 if neuron net is initialized */
	int outputCallbackSet;			/* 1 if output callback set */
	int firstTime;				/* time of first inputData entry */
	int lastTime;				/* time of last inputData entry */
	int lastFileTime;			/* last timestamp in input file */
	int nextOrderId;			/* next number of order */
	int nCycles;				/* number of made training cycles */
	int inputValuesPerSlot;			/* number of inputData values pre one time slot: 1 or 4 (OHLC) */
	int inputDataEnd;			/* logical end of inputData array.may be less then physical */
	int lastInputDataEnd;			/* last inputData end, from which new data allocated */
	int diagramLength;			/* lenght of success/count diagram arrays */
	int nClosedOrders;			/* number of closed orders */
	int maxOrders;				/* maximum number of open orders on exchange */
};

type forexImpl = {
	volatile forexData data;
	const forexMethods methods;
};
