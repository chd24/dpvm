/* forex class, dump method implementation, T19.744-T19.832; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.1, T19.354-T19.744 */

#include "../../../lib/stdlib/stdlib.dpvmake"
#include "../../../lib/utils/utils.dpvmake"
#include "forex.dpvmake"

(int time) -> (const char str[]) time2str = {
	char str[];
	if (time >= 24*60*60*1000000000)
		strftime(str, "%Y-%m-%d %H:%M:%S", time, 0);
	else
		strftime(str, "%H:%M:%S", time, 0);
	return str;
};

(volatile stateful char out[], volatile stateful any forexObj, int graphX, int graphY) -> (const char error[]) dump = {
	forexImpl impl;
	char err[] = convertObjToImpl(impl, forexObj, "dump");
	if (err.csize) return err;

	forexData data = impl.data;

	printf(out, "forexObj dump:
Version:   %s
Flags:     %X
",
		{impl.methods.version, data.flags});

	if (data.registrySet)
		printf(out, "Registry:  %p
",
			{data.registry});

	if (data.inputData.fsize >= 2) {
		float min = data.inputData[0], max = min;
		int i, size = data.inputData.fsize;
		for (i = 1; i < size; i += 1) {
			float x = data.inputData[i];
			if (x < min) min = x;
			if (x > max) max = x;
		}

		printf(out, "# samples: %d
Min time:  %s
Max time:  %s
Period:    %s
Min value: %f
Max value: %f
",
			{time2str(data.firstTime), time2str(data.lastTime),
			time2str((data.lastTime - data.firstTime) / (data.inputData.fsize / data.inputValuesPerSlot - 1)),
			data.inputData.fsize / data.inputValuesPerSlot, min, max});

		if (graphX > 0 && graphY > 0 && data.inputData.fsize >= graphX && max > min) {
			char graph[] = charsArray(graphX * graphY);
			for (i = 0; i < graphX * graphY; i += 1)
				graph[i] = ' ';
			int yfirst = -1;
			for (i = 0; i < size; i += 1) {
				float value = data.inputData[i];
				int x = i * graphX / size, xnext = (i + 1) * graphX / size,
					y = (value - min) * (graphY - 1) / (max - min);
				if (yfirst < 0)
					yfirst = y;
				graph[y * graphX + x] = '|';
				if (xnext > x) {
					int ylast = y;
					if (ylast < yfirst)
						(yfirst, ylast) = (ylast, yfirst);
					for (y = yfirst; y <= ylast; y += 1)
						graph[y * graphX + x] = '$';
					yfirst = -1;
				}
			}

			printf(out, "Graph:\r\n", {});

			if (data.loggerRun) {
				for (i = 0; i < graphY; i += 1) {
					substrcat(out, graph, i * graphX, (i + 1) * graphX);
					strcat(out, "\r\n");
				}
			} else {
				for (i = graphY - 1; i >= 0; i -= 1) {
					substrcat(out, graph, i * graphX, (i + 1) * graphX);
					strcat(out, "\r\n");
				}
			}
		}
	}

	if (!data.diagramLength) {
		data.diagramLength = graphX;
	}

	return "";
};
