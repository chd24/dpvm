/* config class, public header, T20.056-T20.065; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.2, T19.354-T20.056 */

/* config file is a text file consisted of the following lines and comments:
	name = value
   where name is a name of member from config structure;
   config structure should be defined in provided header files;
   type name of config structure should be provided to loadp() method;
   value is a constant expression or special value - one of following;
	__CONFIG__	- the configClass object, const; required to call endInput() method
	__FUNCTION__	- function provided via setFunction()
	__REGISTRY__	- registry provided cia setRegistry()
	__TASKID__	- current task id
	__TIME__	- system time at the moment of calling loadp()
   config files are applied in the order of adding
*/

/* flags for setFlage/getFlags methods */
int CONFIG_FLAG_INPUT = 1; /* input from terminal expected after calling loadp() method; after input the method endInput()
			      need to be called to allow executing the program in background */
int CONFIG_FLAG_DEBUG = 2; /* print config generating function if compilation fails */

type configMethods = {
	const char version[];
	const (const stateful any configObj) -> (const char error[], int flags) getFlags;
	const (volatile stateful any configObj, int flags) -> (const char error[]) setFlags;
	const (volatile stateful any configObj, const stateful any registry) -> (const char error[]) setRegistry;
	const (volatile stateful any configObj, const any function) -> (const char error[])
		setFunction; /* set main function of the program into the config object */
	const (volatile stateful any configObj, const char filename[]) -> (const char error[])
		addHeader; /* add filename of next header file required to build configuration */
	const (volatile stateful any configObj, const char filename[], const char file[]) -> (const char error[])
		addHeaderFile; /* add filename and content of next header file required to build configuration */
	const (volatile stateful any configObj, const char filename[], const char file[], const any objs)
		-> (const char error[]) addHeaderFileObjects; /* add filename, content and set of objects
			from next header file required to build configuration */
	const (volatile stateful any configObj, const char filename[]) -> (const char error[])
		addConfig; /* add filename of next config file */
	const (volatile stateful any configObj, const char filename[], const char file[]) -> (const char error[])
		addConfigFile; /* add filename and content of next config file */
	const (volatile stateful any configObj, const char filename[], const char file[], const any objs)
		-> (const char error[]) addConfigFileObjects; /* add filename, content and set of objects
			from next config file */
	const (volatile stateful char out[], volatile stateful any configObj) -> (const char error[]) dump;
	const (const any configObj, const (const any config, const char error[]) -> () callback,
		const char configTypeName[]) -> () loadp; /* load header and config files, build the object of given type
			and call callback providing this object in another thread; if flag CONFIG_FLAG_INPUT is not set,
			the main thread is finished immediately; if CONFIG_FLAG_INPUT set, the main thread is finished
			after endInput() method is called */
	const (const any configObj) -> (const char error[]) endInput; /* see below */
};

type configClass = {
	volatile any data;
	const configMethods methods;
};
