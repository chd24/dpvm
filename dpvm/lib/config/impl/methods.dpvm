/* config class, methods implementation, T20.056-T20.065; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.2, T19.354-T20.056 */

#include "../../../tools/registry/registry.dpvmake"
#include "config.dpvmake"
#include "version.dpvmh"

int registryMask = REGISTRY_COMPILER;	/* mask of registry applications used by config class */

(const stateful any configObj) -> (const char error[], int flags) getFlags = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "getFlags");
	if (err.csize) return (err, 0);

	return ("", impl.data.flags);
};

(volatile stateful any configObj, int flags) -> (const char error[]) setFlags = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "setFlags");
	if (err.csize) return err;

	impl.data.flags = flags;
	return "";
};

(volatile stateful any configObj, const stateful any registry) -> (const char error[]) setRegistry = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "setRegistry");
	if (err.csize) return err;

	registryData registryCopy = registryObj.copy(registry);
	err = registryObj.check(registryCopy, registryMask);
	if (err.csize) return err;

	impl.data.registry = registryCopy;
	impl.data.registrySet = 1;
	return "";
};

(volatile stateful any configObj, const any function) -> (const char error[]) setFunction = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "setFunction");
	if (err.csize) return err;

	impl.data.function = function;
	return "";
};

(volatile stateful any configObj, const char filename[]) -> (const char error[]) addHeader = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "addHeader");
	if (err.csize) return err;

	configFile f = {filename, "", {}, 0};
	impl.data.files.lpush(f);
	return "";
};

(volatile stateful any configObj, const char filename[], const char file[]) -> (const char error[]) addHeaderFile = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "addHeaderFile");
	if (err.csize) return err;

	configFile f = {filename, file, {}, FILE_LOADED};
	impl.data.files.lpush(f);
	return "";
};

(volatile stateful any configObj, const char filename[], const char file[], const any objs) -> (const char error[])
		addHeaderFileObjects = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "addHeaderFileObjects");
	if (err.csize) return err;

	configFile f = {filename, file, objs, FILE_LOADED | FILE_OBJECTS};
	impl.data.files.lpush(f);
	return "";
};

(volatile stateful any configObj, const char filename[]) -> (const char error[]) addConfig = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "addConfig");
	if (err.csize) return err;

	configFile f = {filename, "", {}, FILE_CONFIG};
	impl.data.files.lpush(f);
	return "";
};

(volatile stateful any configObj, const char filename[], const char file[]) -> (const char error[]) addConfigFile = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "addConfigFile");
	if (err.csize) return err;

	configFile f = {filename, file, {}, FILE_CONFIG | FILE_LOADED};
	impl.data.files.lpush(f);
	return "";
};

(volatile stateful any configObj, const char filename[], const char file[], const any objs) -> (const char error[])
		addConfigFileObjects = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "addConfigFileObjects");
	if (err.csize) return err;

	configFile f = {filename, file, objs, FILE_CONFIG | FILE_LOADED | FILE_OBJECTS};
	impl.data.files.lpush(f);
	return "";
};

(const any configObj) -> (const char error[]) endInput = {
	configImpl impl;
	char err[] = convertObjToImpl(impl, configObj, "endInput");
	if (err.csize) return err;

	if (!(impl.data.flags & CONFIG_FLAG_INPUT))
		return mkError("flag CONFIG_FLAG_INPUT is not det", "endInput");

	msendp("", "", impl, "");
	return "";
};

configMethods configMethodsImpl = {
	version,
	getFlags,
	setFlags,
	setRegistry,
	setFunction,
	addHeader,
	addHeaderFile,
	addHeaderFileObjects,
	addConfig,
	addConfigFile,
	addConfigFileObjects,
	dump,
	loadp,
	endInput
};
