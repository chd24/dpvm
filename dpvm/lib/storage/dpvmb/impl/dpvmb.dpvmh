/* dpvmb class, internal header, T20.127-T20.155; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.2, T19.354-T20.056 */

#include "../../../../tools/registry/registry.dpvmh"
#include "../dpvmb.dpvmh"

/* node layout:
	- object + alignment to 8 bytes boundary
	- object hash 32 bytes
	- links array, each link is offset of node's header in bytes, size of link is 8 bytes
	- header 16 bytes, see below
*/

int DPVMB_OBJ_ALIGN		= 8;	/* object alignment */
int DPVMB_HASH_SIZE		= 32;	/* hash size */
int DPVMB_LINK_SIZE		= 8;	/* link size */

/* node header 16 bytes */
int DPVMB_HEAD_OBJ_SIZE		= 0;	/* size of serialized object in bytes */
int DPVMB_HEAD_SHORT_HASH	= 8;	/* short hash of: previous header, object hash, links array and this header */
int DPVMB_HEAD_N_LINKS		= 14;	/* number of links to child nodes; each link is distance from child node header
					   to parent node header measured in link sizes */
int DPVMB_HEAD_MARKER		= 15;	/* byte 0x80 as marker of header */
int DPVMB_HEAD_SIZE		= 16;	/* header size */

type Archiver = (int hash0, int hash1, int hash2, int hash3, int objSize) -> (any res, int begin, int size);

type dpvmbData = {
	const registryData registry;	/* system registry */
	const char fileName[];		/* filename of database */
	volatile char db[];		/* database */
	const Archiver archiver;	/* self-archiver of db */
	int flags;			/* flags */
	int registrySet;		/* 1 if registry set */
	int dbInited;			/* 1 if database verified */
	int fileNameSet;		/* 1 if filename set */
	int savedBytes;			/* number of bytes from db saved to file */
};

type dpvmbImpl = {
	volatile dpvmbData data;
	const dpvmbMethods methods;
};
