/* dfs class, list catalogue demo, T18.838-T18.839; $DVS:time$ */

#include "../../../stdlib/stdlib.dpvmake"
#include "../../../utils/utils.dpvmake"
#include "../dfs.dpvmake"

type listCatalogueData = {
    volatile dfsClass dfsObj;
    const char volumePath[];
    const char cataloguePath[];
    volatile int runs[];
    volatile int volume[];
    int pos;
    int begin;
};

(volatile stateful any data, const char fileName[], const dfsFileAttributes attr, const char error[]) -> () listCatalogueCallback = {
    char mess[];
    printf(mess, "name=%-32s  mode=%05X  inode=%4X  size=%10d\r\n", {fileName, attr.mode, attr.inode, attr.size});
    outputp("", "", mess);
    return;
};

(volatile stateful listCatalogueData data, const char file[], int status) -> () loadVolumeCallback = {
    if (status <= 0 || status & 7) {
        char mess[];
        printf(mess, "Failed loading dfs volume part, status=%d\r\n", {status});
        outputp("", "", mess);
        return;
    }

    int volume[] = chars2ints(file, 0, status);

    char error[] = data.dfsObj.methods.addVolumePart(data.dfsObj, volume, data.pos);
    if (error.csize) {
        char mess[];
        printf(mess, "%s\r\n", {error});
        outputp("", "", mess);
        return;
    }

    dfsFileAttributes attr;
    (attr, error) = data.dfsObj.methods.findPath(data.dfsObj, data.cataloguePath);
    int inode = attr.inode;
    if (error.csize) {
        if (strstr(error, "need more") >= 0) {
            data.pos = (inode >> 15) << 17;
            read(code, data, data.volumePath, data.pos << 3, 0x100000);
            return;
        }
        char mess[];
        printf(mess, "%s, inode=%X\r\n", {error, inode});
        outputp("", "", mess);
        return;
    }
    if ((attr.mode & DFS_IFMT) != DFS_IFDIR) {
        char mess[];
        printf(mess, "Item is not a catalogue, mode=%X, inode=%X\r\n", {attr.mode, inode});
        outputp("", "", mess);
        return;
    }

    int runs[], begin, end;
    (error, inode, data.begin) = data.dfsObj.methods.listCatalogue(data.dfsObj, data, listCatalogueCallback, inode, data.begin, (1 << 63) - 1);
    if (error.csize) {
        if (strstr(error, "need more") >= 0) {
            data.pos = (inode >> 15) << 17;
            read(code, data, data.volumePath, data.pos << 3, 0x100000);
            return;
        }
        char mess[];
        printf(mess, "%s, inode=%X\r\n", {error, inode});
        outputp("", "", mess);
        return;
    }

    return;
};

(const char volumePath[], const char cataloguePath[]) -> () listCatalogue = {
    dfsClass dfsObj = dfsCreate();

    listCatalogueData data = {dfsObj, volumePath, cataloguePath};

    read(loadVolumeCallback, data, volumePath, 0, 0x100000);
    return;
};
