/* print formatted string; T18.734-T18.736; $DVS:time$ */

#include "stdlib.dpvmake"

(volatile stateful char dst[], const stateful char format[], const stateful any args) -> (int status) printf = {
    int nl, ni, nf, nc, n = dst.csize, i, size = format.csize;

    for (i = 0; i < size; i += 1) {
        int c = format[i];
        if (c == '%') {
            i += 1;
            if (i >= size)
                return -1;

            c = format[i];

            int width, prec = -1, dir = 1;
            char tmp[], pad = ' ';

            if (c == '-') {
                dir = -1;
                i += 1;
                if (i >= size)
                    return -2;
                c = format[i];
            }

            if (c == '0') {
                pad = '0';
            }

            while (c >= '0' && c <= '9') {
                width *= 10;
                width += c - '0';
                i += 1;
                if (i >= size)
                    return -3;
                c = format[i];
            }

            if (c == '.') {
                i += 1;
                if (i >= size)
                    return -4;
                c = format[i];
                prec = 0;

                while (c >= '0' && c <= '9') {
                    prec *= 10;
                    prec += c - '0';
                    i += 1;
                    if (i >= size)
                        return -5;
                    c = format[i];
                }
            }

            if (c == '%') {
                tmp.cpush('%');

            } else if (c == 'c') {
                if (nc >= args.csize)
                    return -'c';
                tmp.cpush(args.c[nc]);
                nc += 1;

            } else if (c == 'd') {
                if (ni >= args.isize)
                    return -'d';
                if (prec < 0)
                    prec = 1;
                printint(tmp, args.i[ni], prec);
                ni += 1;

            } else if (c == 'f') {
                if (nf >= args.fsize)
                    return -'f';
                if (prec < 0)
                    prec = 6;
                printfloat(tmp, prec, args.f[nf]);
                nf += 1;

            } else if (c == 'p') {
                if (nl >= args.lsize)
                    return -'p';
                printobjname(tmp, args.l[nl]);
                nl += 1;

            } else if (c == 's') {
                if (nl >= args.lsize)
                    return -'s';
                if (args.l[nl].type != "".type)
                    return -(1 << 8 | 's');

                any str = args.l[nl];
                int sz = str.csize, j;
                if (prec >= 0 && sz > prec)
                    sz = prec;

                for (j = 0; j < sz; j += 1)
                    tmp.cpush(str.c[j]);
                nl += 1;

            } else if (c == 'x' || c == 'X') {
                if (ni >= args.isize)
                    return -c;

                if (prec < 0)
                    prec = 1;
                printhex(tmp, args.i[ni], prec, c == 'X');
                ni += 1;

            } else {
                return -c;
            }

            int sz = tmp.csize;
            if (dir > 0) {
                while (sz < width)
                    dst.cpush(pad), sz += 1;
            } else {
                while (sz < width)
                    tmp.cpush(pad), sz += 1;
            }

            strcat(dst, tmp);
        } else {
            dst.cpush(c);
        }
    }

    return dst.csize - n;
};
