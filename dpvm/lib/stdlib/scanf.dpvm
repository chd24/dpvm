/* scan formatted string; T19.746-T19.829; $DVS:time$ */

#include "../math/math.dpvmake"
#include "stdlib.dpvmake"

(volatile stateful any dst, const stateful char format[], const stateful char src[], int begin, int end)
		-> (int matched) scanf = {
	int matched, fmti, fmtsize = format.csize, srci = begin, srcsize = end;

	for (fmti = 0; fmti < fmtsize; fmti += 1) {
		int c = format[fmti], sp;

		while (c == ' ' || c == '\r' || c == '\n' || c == '\t') {
			fmti += 1;
			if (fmti >= fmtsize)
				return matched;
			c = format[fmti];
			sp = 1;
		}

		if (c == '%' && fmti + 1 < fmtsize && format[fmti + 1] != 'c')
			sp = 1;

		if (sp) {
			while (srci < srcsize &&
					(src[srci] == ' ' || src[srci] == '\r' || src[srci] == '\n' || src[srci] == '\t')) {
				srci += 1;
				if (srci >= srcsize)
					return matched;
			}
		}

		if (c == '%') {
			fmti += 1;
			if (fmti >= fmtsize)
				return matched;
			c = format[fmti];

			if (c == 'd' || c == 'o' || c == 'u' || c == 'x' || c == 'i') {
				int sign = 1, base = 10;

				if (c == 'o')
					base = 8;
				else if (c == 'x')
					base = 16;
				else if (c == 'i')
					base = 0;

				if (base && srci < srcsize && (src[srci] == '+' || src[srci] == '-')) {
					if (src[srci] == '-')
						sign = -1;
					srci += 1;
				}

				int number, error;
				(number, error, srci) = strtoi(src, srci, srcsize, base);
				if (error)
					return matched;

				number *= sign;
				dst.ipush(number);
				matched += 1;

			} else if (c == 'f') {
				int error, srci0;
				float number;
				(error, srci0, number) = strtof(src, srci, srcsize);
				if (error) {
					int inumber, sign = 1;
					if (srci < srcsize && (src[srci] == '+' || src[srci] == '-')) {
						if (src[srci] == '-')
							sign = -1;
						srci += 1;
					}
					(inumber, error, srci) = strtoi(src, srci, srcsize, 10);
					if (error)
						return matched;

					inumber *= sign;
					number = inumber;
				} else
					srci = srci0;

				if (srci < srcsize && (src[srci] == 'e' || src[srci] == 'E')) {
					int inumber, sign = 1;
					srci += 1;
					if (srci < srcsize && (src[srci] == '+' || src[srci] == '-')) {
						if (src[srci] == '-')
							sign = -1;
						srci += 1;
					}
					(inumber, error, srci) = strtoi(src, srci, srcsize, 10);
					if (error)
						return matched;

					inumber *= sign;
					number *= fFastPow(inumber, 10);
				}

				dst.fpush(number);
				matched += 1;

			} else if (c == 's') {
				char s[];
				while (srci < srcsize && src[srci] != ' ' && src[srci] != '\r'
						&& src[srci] != '\n' && src[srci] != '\t') {
					s.cpush(src[srci]);
					srci += 1;
				}
				if (!s.csize)
					return matched;

				dst.lpush(s);
				matched += 1;

			} else if (c == 'c') {
				if (srci >= srcsize)
					return matched;
				char d = src[srci];
				srci += 1;
				dst.cpush(d);
				matched += 1;

			} else if (c == '%') {
				if (srci >= srcsize || src[srci] != '%')
					return matched;
				srci += 1;
			}

		} else {
			if (srci >= srcsize || src[srci] != c)
				return matched;
			srci += 1;
		}
	}

	return matched;
};
