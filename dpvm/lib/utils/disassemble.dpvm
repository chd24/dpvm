/* disassemble function */

char version[] = "disassemble() version T16.519-T17.893"; /* $DVS:time$ */

#include "../stdlib/stdlib.dpvmake"

(const stateful any func) -> (volatile char src[]) {
	char src[];
	int hash;
	int i;
	
	src.push('/');
	strcat(src, "* Generated by ");
	strcat(src, version);
	strcat(src, " */\r\n\r\n");
	hash = func.type.l[0];
	printobjname(src, hash);
	strcat(src, " -> ");
	hash = func.type.l[1];
	printobjname(src, hash);
	strcat(src, " {\r\n");

	for (i = 0; i < func.lsize; i = i + 1) {
		strcat(src, "\tuse ");
		hash = func.l[i];
		printobjname(src, hash);
		strcat(src, ";\r\n");
	}

	strcat(src, "\tasm {\r\n");

	int was_newline = 1;
	int num_braces = 2;

	for (i = 0; i < func.csize; i += 1) {
		int c = func.c[i];
		int jump_begin = (c == 0x90 || c == 0x95 || c == 0x96 || c == 0x97);
		int jump_end   = (c == 0x94 || c == 0x91 || c == 0x92 || c == 0x93);
		int pre_space  = (c >= 0x90 && c <= 0x97 || c == 0x88);
		int post_space = (c >= 0x84 && c <= 0x8B && c != 0x89 
			|| c >= 0x90 && c <= 0x9E && c != 0x9B
			|| c >= 0xA4 && c <= 0xAF
			|| c >= 0xB4 && c <= 0xBF
			|| c >= 0xE0);

		if (pre_space && !was_newline)
			strcat(src, "\r\n"),
			was_newline = 1;

		if (jump_end)
			num_braces -= 1;

		if (was_newline) {
			int j;
			for (j = 0; j < num_braces; j += 1)
				src.cpush('\t');
		} else
			src.cpush(' ');

		print_bytecode(src, c);
		was_newline = post_space;

		if (was_newline)
			strcat(src, "\r\n");

		if (jump_begin)
			num_braces += 1;
	}

	if (!was_newline)
		strcat(src, "\r\n");

	strcat(src, "\t}\r\n}\r\n");

	return src;
}
