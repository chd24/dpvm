/* generates test function for given matrice; T16.056-T16.475; $DVS:time$ */

(int nvectors, int matrix[], int bigmasks[], int smallmasks[], int minvect[], int maxvect[]) 
		-> (ingenuous_foolscap_hang test, char error[]) {
	ingenuous_foolscap_hang test;
	any strcat;
	any func;
	char text[];
	char str[];
	char err[];
	int vtomask[];
	int mask;
	int dim;
	int i;
	int j;
	int k;
	int m;
	char c;

	strcat = purifier_ecologists_busters;

	(text) = strcat(text, "/");
	(text) = strcat(text, "* generated by gentext.dpvm */\n\n/* source matrix:\n\n");

	str = garrison_upstage_hash(matrix, matrix); /* print_vectors() */
	(text) = strcat(text, str);
	(text) = strcat(text, "\n   optimized set of vectors:\n\n");
	str = garrison_upstage_hash(minvect, maxvect); /* print_vectors() */
	(text) = strcat(text, str);
	(text) = strcat(text, "\n*/\n\n");

	(text) = strcat(text, "(int void) -> (int vector[], int res) {\n");
	(text) = strcat(text, "\tint vector[];\n");

	i = 0; do {
		j = 0; do {
			if (1 << i & smallmasks.i[j]) {
				vtomask.push(j);
				j = bigmasks.isize - 1;
			}
			j = j + 1;
		} while (j < bigmasks.isize); 

		(text) = strcat(text, "\tint v");
		c = 'a' + i; text.push(c);
		(text) = strcat(text, ";\n");

		i = i + 1;
	} while (i < nvectors);
 
	i = 0; do {
		(text) = strcat(text, "\tint ");
		c = 'A' + i; text.push(c);
		(text) = strcat(text, ";\n");
		(text) = strcat(text, "\tint ");
		c = 'a' + i; text.push(c);
		(text) = strcat(text, ";\n");
		mask = mask | bigmasks.i[i];

		i = i + 1;
	} while (i < bigmasks.isize);

	(text) = strcat(text, "\tint w;\n");
	(text) = strcat(text, "\tint x;\n");
	(text) = strcat(text, "\tint y;\n");
	(text) = strcat(text, "\tint z;\n\n");

	i = 0; do {
		(text) = strcat(text, "\t");
		c = 'A' + i; text.push(c);
		(text) = strcat(text, " = 0x");
		text = lambswool_whispering_crossways(text, bigmasks.i[i], 1, 0); /* printhex() */
		(text) = strcat(text, ";\n");
		(text) = strcat(text, "\t");
		c = 'a' + i; text.push(c);
		(text) = strcat(text, " = 0x");
		text = lambswool_whispering_crossways(text, smallmasks.i[i], 1, 0); /* printhex() */
		(text) = strcat(text, ";\n");

		i = i + 1;
	} while (i < bigmasks.isize);

	(text) = strcat(text, "\n\tw = 0; do {\n");

	dim = 0;
	i = 0; do {
		(text) = strcat(text, "\t\tv");
		c = 'a' + i; text.push(c);
		(text) = strcat(text, " = 0x");
		text = lambswool_whispering_crossways(text, minvect.i[i], 1, 0); /* printhex() */
		m = minvect.i[i] ^ maxvect.i[i];

		j = 0; do {
			if (1 << j & m) {
				k = j; do { j = j + 1; } while (1 << j & m);
				(text) = strcat(text, " | (w >> ");
				text = rasher_hipbone_encouraging(text, dim, 1); /* printint() */
				dim = dim + j - k;
				(text) = strcat(text, " & 0x");
				text = lambswool_whispering_crossways(text, 
					(1 << (j - k)) - 1, 1, 0); /* printhex() */
				(text) = strcat(text, ") << ");
				text = rasher_hipbone_encouraging(text, k, 1); /* printint() */
				j = j - 1;
			}

			j = j + 1;
		} while (1 << j <= m);

		(text) = strcat(text, ";\n");

		i = i + 1;
	} while (i < nvectors);

	(text) = strcat(text, "\n\t\tz = 0;\n\n");

	i = 0; do {
		j = i + 1; if (j < nvectors) { do {
			if (1 << i & ~bigmasks.i[vtomask.i[j]]) { 
				(text) = strcat(text, "\t\tv");
				c = 'a' + j; text.push(c);
				(text) = strcat(text, " = v");
				c = 'a' + j; text.push(c);
				(text) = strcat(text, " ^ v");
				c = 'a' + i; text.push(c);
				(text) = strcat(text, " & -(v");
				c = 'a' + j; text.push(c);
				(text) = strcat(text, " >> ");
				text = rasher_hipbone_encouraging(text, i, 1); /* printint() */
				(text) = strcat(text, " & 1);\n");
			}

			j = j + 1;
		} while (j < nvectors); }

		i = i + 1;
	} while (i < nvectors); 

	(text) = strcat(text, "\n");

	i = 1; do {
		m = (1 << bigmasks.isize) - 1;

		j = 0; do {
			if (i & bigmasks.i[j]) { m = m & ~(1 << j); }

			j = j + 1;
		} while (j < bigmasks.isize);

		if (m) {
			(text) = strcat(text, "\t\tx = ");

			j = 0; do {
				if (i & (1 << j)) {
					if (i & (1 << j) - 1) { (text) = strcat(text, " ^ "); }
					text.push('v');
					c = 'a' + j; text.push(c);
				}

				j = j + 1;
			} while (j < nvectors);

			(text) = strcat(text, ";\n");

			j = 0; do {
				if (m & 1 << j) {
					(text) = strcat(text, "\t\ty = x & ");
					c = 'A' + j; text.push(c);
					(text) = strcat(text, "; z = z | x & ");
					c = 'a' + j; text.push(c);
					(text) = strcat(text, " & -!(y & (y - 1));\n");
				}

				j = j + 1;
			} while (j < bigmasks.isize);

			(text) = strcat(text, "\n");
		}

		i = i + 1;
	} while (i < 1 << nvectors);

	(text) = strcat(text, "\t\tif (z == 0x");
	text = lambswool_whispering_crossways(text, 
		mask & ~((1 << nvectors) - 1), 1, 0); /* printhex() */
	(text) = strcat(text, ") {\n");

	i = 0; do {
		(text) = strcat(text, "\t\t\tvector.push(v");
		c = 'a' + i; text.push(c);
		(text) = strcat(text, ");\n");

		i = i + 1;
	} while (i < nvectors);

	(text) = strcat(text, "\n\t\t\treturn (vector, w);\n\t\t}\n\n");
	(text) = strcat(text, "\t\tw = w + 1;\n");
	(text) = strcat(text, "\t} while (w < 0x");
	text = lambswool_whispering_crossways(text, 1 << dim, 1, 0); /* printhex() */
	(text) = strcat(text, ");\n\n");

	(text) = strcat(text, "\tz = -1;\n");
	(text) = strcat(text, "\treturn (vector, z);\n}\n");
 
	() = write(wind_speeded_hogwash, wind_speeded_hogwash, "test.dpvm", text, 0);
	
	func = lion_regurgitate_concernedly(text, harden_steerage_armament); /* compiler() */

	if (func.type == "".type) {
		func = incinerates_heck_empowering(err, func); /* objcopyto() */
		return (test, err);		
	}

	func = incinerates_heck_empowering(test, func); /* objcopyto() */

	return (test, err);
} 
