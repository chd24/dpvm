/* neuron class, public header, T19.358-T19.744; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.0, T19.354-T19.358 */

/* flags */
int NEURON_DUMP_SOURCE		=     1; /* dump source code of computation function for each neuron */
int NEURON_DUMP_DERIVATIONS	=     2; /* dump all non-zero by-weight-derivation values for each neuron */
int NEURON_DEBUG		=     4; /* debug computations */
int NEURON_DEBUG_COMPILATION	=     8; /* short output during functions compilation */
int NEURON_SPLIT_SUMS		=  0x10; /* split large sums between functions */
int NEURON_NO_PARALLEL		=  0x20; /* do not use parallel computation */
int NEURON_SAVE_CODE		=  0x40; /* save all sources, compilation and translation results of functions */
int NEURON_METHOD_MOMENTUM	= 0x100; /* use Momentum acceleration algorithm */
int NEURON_METHOD_RMSP		= 0x200; /* use RMSP (square root)  acceleration algorithm */
int NEURON_METHOD_ADAM		= 0x300; /* use Adam acceleration algorithm */

type inlineFunction = {
	const (float) -> (float) function;
	const char		 format[]; /* expression format for printf using %s for function argument */
};

type activationFunction = {
	const char name[];
	const inlineFunction function;
	const inlineFunction derivation;
	const inlineFunction derivationFromFunction;
};

type trainingParams = {
	float speed;		/* training speed */
	float beta1;		/* coeff for Momentum and Adam methods */
	float beta2;		/* coeff for RMSP and Adam methods */
	float epsilon;		/* epsilon for Adam method */
};

type neuronMethods = {
	const char version[];
	const activationFunction activationFunctions[];
	const (volatile stateful any neuronObj) -> (const char error[], int flags) getFlags;
	const (volatile stateful any neuronObj, int flags) -> (const char error[]) setFlags;
	const (volatile stateful any neuronObj, const any seed) -> (const char error[]) setRandomSeed;
	const (volatile stateful any neuronObj, const stateful any registry) -> (const char error[]) setRegistry;
	const (volatile stateful any neuronObj, const char name[]) -> (const activationFunction f, const char error[]) getActivationFunction;
	const (volatile stateful any neuronObj, const char description[]) -> (const char error[]) construct;
	const (volatile stateful any neuronObj) -> (const char error[], int nInputs) getNInputs;
	const (volatile stateful any neuronObj) -> (const char error[], int nOutputs) getNOutputs;
	const (volatile stateful any neuronObj, const stateful float inputs[], volatile stateful float outputs[],
		const trainingParams params) -> (const char error[], float res) training;
	const (volatile stateful char out[], volatile stateful any neuronObj) -> (const char error[]) dump;
};

type neuronClass = {
	volatile any data;
	const neuronMethods methods;
};
