/* neuron class, makefile for implementation, T19.358-T19.744; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.0, T19.354-T19.643 */

#include "neuron.dpvmh"

/*@ "activation.dpvm": array of activation functions */
activationFunction
	activationFunctions[] = lectures_forlornness_exaggerated;
/* @*/

/*@ "printInlineFunction.dpvm": insert function inline using printf format */
(volatile stateful char s[], const stateful inlineFunction function, const stateful char argument[]) -> ()
	printInlineFunction = regrow_card_happygolucky;
/* @*/

/*@ "mkError.dpvm": compose error message */
(const char mess[], const char func[]) -> (const char err[])
	mkError = revelling_geophysicist_craftiest;
/* @*/

/*@ "weightToGroup.dpvm": convert weightId to groupId */
(const stateful neuronLayer layer, int weightId) -> (int groupId)
	weightToGroup = facilitate_tarmacadam_idleness;
/* @*/

/*@ "convertObjToImpl.dpvm": convert obj from type any to type dfsImpl and check correctness (func - name of function which call this) */
(volatile stateful neuronImpl impl, const stateful any neuronObj, const char func[]) -> (const char error[])
	convertObjToImpl = gruelling_wile_shamming;
/* @*/

/*@ "registry.dpvm": check registry and cast it to native type */
(const stateful any regSrc) -> (volatile registryData reg, const char error[])
	registryPrepare = celebrated_unclean_swallower;
/* @*/

/*@ "compile.dpvm": compile function with debug output */
(const stateful neuronDataCompile data, const char name[], const char source[], const any links) -> (const any func)
	compile = lax_budgets_possessors;
/* @*/

/*@ "genNeuronCompute.dpvm": generate compute function for neuron */
(volatile stateful char s[], const stateful neuronDataCompile data, int layerId, int groupId, int neuronId,
		int mode, int startInput) -> (int startInput)
	genNeuronCompute = learnedly_abhorred_ramblings;
/* @*/

/*@ "genGroupCompute.dpvm": generate compute function for neuron group */
(const stateful neuronDataCompile data, int layerId, int groupId, int mode) -> (const any func, int nSubroutines)
	genGroupCompute = screamed_tendons_carburettor;
/* @*/

/*@ "genGroupGradient.dpvm": generate gradient function for neuron layer */
(const stateful neuronDataCompile data, int layerId, int groupId) -> (const any func, int nSubroutines)
	genGroupGradient = deviously_reaccept_stipulates;
/* @*/

/*@ "genNetTraining.dpvm": generate training function for neuron net, fill its data */
(volatile stateful neuronData data) -> (const char mess[])
	genNetTraining = scantiest_velocities_omelettes;
/* @*/

/*@ "addFullLayer.dpvm": add next full layer of neurons */
(volatile stateful neuronImpl impl, const activationFunction activation, int nNeurons) -> (const char error[])
	addFullLayer = carnivorous_dismounting_oversights;
/* @*/

/*@ "addConvolutionLayer.dpvm": add next convolution layer of neurons */
(volatile stateful neuronImpl impl, const activationFunction activation, int depth, int width, int maskDepth, int maskSize,
		int step) -> (const char error[])
	addConvolutionLayer = headlining_acquit_bestride;
/* @*/

/*@ "construct.dpvm": construct neuron net by short text description like full("relu", 128) ... */
(volatile stateful any neuronObj, const char description[]) -> (const char error[])
	construct = distilling_vouchsafe_pelmets;
/* @*/

/*@ "training.dpvm": one step of neuron net training */
(volatile stateful any neuronObj, const stateful float inputs[], volatile stateful float outputs[],
		const trainingParams params) -> (const char error[], float res)
	training = flashily_bellicose_autographing;
/* @*/

/*@ "dump.dpvm": dump internal content of neuronObj object */
(volatile stateful char out[], volatile stateful any neuronObj) -> (const char error[])
	dump = tumble_chancer_sanctuary;
/* @*/

/*@ "methods.dpvm": public methods implementation */
neuronMethods neuronMethodsImpl = lamb_ascribe_gossamer;
/* @*/                                  