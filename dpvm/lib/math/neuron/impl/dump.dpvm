/* neuron class, dump method implementation, T19.358-T19.739; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.0, T19.354-T19.358 */

#include "../../../stdlib/stdlib.dpvmake"
#include "neuron.dpvmake"

(volatile stateful char out[], volatile stateful any neuronObj) -> (const char error[]) dump = {
	neuronImpl impl;
	char err[] = convertObjToImpl(impl, neuronObj, "dump");
	if (err.csize) return err;

	neuronData data = impl.data;
	neuronNet net = data.cdata.net;
	neuronNetRuntime netR = data.net;

	printf(out,
"neuronObj dump:
Version: %s
Flags:   %X
Neurons:
",
		{impl.methods.version, data.cdata.flags});

	int i;
	for (i = 0; i < net.neurons.lsize; i += 1) {
		neuron n = net.neurons[i];
		neuronLayer layer = net.layers[n.layerId];
		neuronLayerRuntime layerR = netR.layers[n.layerId];
		neuronGroup group = layer.groups[n.groupId];
		neuronGroupRuntime groupR = layerR.groups[n.groupId];

		printf(out, " n%d = %s(", {n.activation.name, i});

		int j;
		for (j = 0; j < n.inputNeuronIds.isize; j += 1) {
			int gid = weightToGroup(layer, n.inputWeightIds[j]);
			float w = layerR.groups[gid].weights.l[0].f[n.inputWeightIds[j] - layer.groups[gid].weightStartId];
			if (j && w >= 0)
				out.cpush('+');
			printf(out, "%.2f", {w});
			if (n.inputNeuronIds[j] != -1)
				printf(out, "*n%d", {n.inputNeuronIds[j]});
		}

		printf(out, ") = %f\r\n", {groupR.outputs.l[0].f[n.outputStartId]});
	}

	return "";
};
