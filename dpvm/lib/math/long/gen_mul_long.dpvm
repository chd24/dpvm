/* generate function for multiplication of numbers with fixed length */

#include "../../stdlib/stdlib.dpvmake"

char version[] = "gen_mul_long(), T17.550-T17.550"; /* $DVS:time$ */

(volatile stateful char s[], int size, int group, int n) -> () printvar {
	if (n >= size && group == 2) 
		n -= size, group = 1;
	if (group == 0) 
		s.cpush('x');
	else if (group == 1)
		s.cpush('y');
	else
		s.cpush('z');
	printhex(s, n, 1, 0);
	return;
}

(int size) -> (volatile char code[]) {
	char s[];

	strcat(s, "/* multiply two long numbers of size ");
	printint(s, size, 1);
	strcat(s, " qwords; generated by ");
	strcat(s, version);
	strcat(s, " (");
	printobjname(s, code);
	strcat(s, ") */\r\n\r\nint z = 0x8000000000000000;\r\n\r\n(");

	int i;
	for (i = 0; i < size; i += 1) {
		strcat(s, "int ");
		printvar(s, size, 0, size - 1 - i);
		if ((i & 0x7) == 0x7)
			strcat(s, ",\r\n ");
		else
			strcat(s, ", ");
	}
	for (i = 0; i < size; i += 1) {
		strcat(s, "int ");
		printvar(s, size, 1, size - 1 - i);
		if (i == size - 1)
			strcat(s, ") ->\r\n(");
		else if ((i & 0x7) == 0x7)
			strcat(s, ",\r\n ");
		else
			strcat(s, ", ");
	}
	for (i = 0; i < 2*size; i += 1) {
		strcat(s, "int ");
		printvar(s, size, 3, 2*size - 1 - i);
		if (i == 2*size - 1)
			strcat(s, ") {\r\n");
		else if ((i & 0x7) == 0x7)
			strcat(s, ",\r\n ");
		else
			strcat(s, ", ");
	}
	for (i = 0; i < size; i += 1) {
		strcat(s, "\tint ");
		printvar(s, size, 2, size - 1 - i);
		strcat(s, " = z;\r\n");
	}
	strcat(s, "\r\n");

	int j;
	for (j = 0; j < size; j += 1) {
		strcat(s, "\t{\r\n\t\tint p;\r\n");

		for (i = 0; i < size; i += 1) {
			strcat(s, "\t\t{ int l = ");
			printvar(s, size, 0, i);
			strcat(s, "; int h = ");
			printvar(s, size, 1, j);
			strcat(s, "; asm { mul }; l += ");
			printvar(s, size, 2, i + j);
			strcat(s, "; int r = l < ");
			printvar(s, size, 2, i + j);
			strcat(s, "; ");
			printvar(s, size, 2, i + j);
			strcat(s, " = p + l; l = ");
			printvar(s, size, 2, i + j);
			strcat(s, " < l; p = l + h + r; }\r\n");
		}

		strcat(s, "\t\t");
		printvar(s, size, 1, j);
		strcat(s, " = p + z;\r\n\t}\r\n\r\n");
	}

	for (i = 0; i < 2*size; i += 1) {
		strcat(s, "\t");
		printvar(s, size, 2, i);
		strcat(s, " += z;\r\n");
	}

	strcat(s, "\r\n\treturn (");
	for (i = 0; i < 2*size; i += 1) {
		printvar(s, size, 2, 2*size - 1 - i);
		if (i == 2*size - 1)
			strcat(s, ");\r\n}\r\n");
		else if ((i & 0xf) == 0xf)
			strcat(s, ",\r\n\t\t");
		else
			strcat(s, ", ");
	}

	return s;
}
