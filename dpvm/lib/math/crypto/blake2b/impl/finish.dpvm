/* blake2b class, finish method implementation, T20.341-T20.341; $DVS:time$ */

#include "../../../../stdlib/stdlib.dpvmake"
#include "../../../../utils/utils.dpvmake"
#include "blake2b.dpvmake"

(volatile stateful char output[], volatile stateful any blake2bObj) -> () finish = {
	blake2bImpl impl;
	char err[] = convertObjToImpl(impl, blake2bObj, "finish");
	if (err.csize) return;

	if (impl.data.input.csize || !impl.data.compressedBytes) {
		char array[];
		int i, size = BLAKE2B_BLOCK_SIZE - impl.data.input.csize;
		for (i = 0; i < size; i++)
			array.cpush(0);
		impl.data.compressedBytes -= size;
		addString(impl, array);
	}

	impl.data.compressedBytes = 0;
	int h[8] = impl.data.state;
	strcat(output, ints2chars((int[]){h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7]}, 0, impl.data.outputLength >> 3));
	return;
};
