/* blake2b class, generateCompress method implementation, T20.336-T20.349; $DVS:time$ */

#include "../../../../stdlib/stdlib.dpvmake"
#include "blake2b.dpvmake"
#include "version.dpvmh"

int blake2b_IV[8..] =
{
	0x6a09e667f3bcc908, 0xbb67ae8584caa73b,
	0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
	0x510e527fade682d1, 0x9b05688c2b3e6c1f,
	0x1f83d9abfb41bd6b, 0x5be0cd19137e2179
};

int blake2b_sigma[16..][12..] =
{
	{  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
	{ 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 } ,
	{ 11,  8, 12,  0,  5,  2, 15, 13, 10, 14,  3,  6,  7,  1,  9,  4 } ,
	{  7,  9,  3,  1, 13, 12, 11, 14,  2,  6,  5, 10,  4,  0, 15,  8 } ,
	{  9,  0,  5,  7,  2,  4, 10, 15, 14,  1, 11, 12,  6,  8,  3, 13 } ,
	{  2, 12,  6, 10,  0, 11,  8,  3,  4, 13,  7,  5, 15, 14,  1,  9 } ,
	{ 12,  5,  1, 15, 14, 13,  4, 10,  0,  7,  6,  3,  9,  2,  8, 11 } ,
	{ 13, 11,  7, 14, 12,  1,  3,  9,  5,  0, 15,  4,  8,  6,  2, 10 } ,
	{  6, 15, 14,  9, 11,  3,  0,  8, 12,  2, 13,  7,  1,  4, 10,  5 } ,
	{ 10,  2,  8,  4,  7,  6,  1,  5, 15, 11,  9, 14,  3, 12, 13 , 0 } ,
	{  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 } ,
	{ 14, 10,  4,  8,  9, 15, 13,  6,  1, 12,  0,  2, 11,  7,  5,  3 }
};

(volatile stateful char out[], const int sigma[16..], int a, int b, int c, int d, int x, int y) -> () Mix = {
	printf(out, "\tV%x += V%x + m%x;\r\n", {a, b, sigma[x]});
	printf(out, "\tV%x ^= V%x;\r\n", {d, a});
	printf(out, "\tV%x = V%x >> 32 | V%x << 32;\r\n", {d, d, d});

	printf(out, "\tV%x += V%x;\r\n", {c, d});
	printf(out, "\tV%x ^= V%x;\r\n", {b, c});
	printf(out, "\tV%x = V%x >> 24 | V%x << 40;\r\n", {b, b, b});

	printf(out, "\tV%x += V%x + m%x;\r\n", {a, b, sigma[y]});
	printf(out, "\tV%x ^= V%x;\r\n", {d, a});
	printf(out, "\tV%x = V%x >> 16 | V%x << 48;\r\n", {d, d, d});

	printf(out, "\tV%x += V%x;\r\n", {c, d});
	printf(out, "\tV%x ^= V%x;\r\n", {b, c});
	printf(out, "\tV%x = V%x >> 63 | V%x << 1;\r\n", {b, b, b});

	return;
};

(volatile stateful char out[], int round, int index, char var) -> () Debug = {
	printf(out, "\t{ char mess[]; printf(mess, \"[%c%x:%x:%%x:%%x:%%x:%%x:%%x:%%x:%%x:%%x]\\r\\n\", {%c%x, %c%x, %c%x, %c%x, %c%x, %c%x, %c%x, %c%x}); outputp({},{},mess); }\r\n",
		{index, round, index, index+1, index+2, index+3, index+4, index+5, index+6, index+7,
		var, var, var, var, var, var, var, var, var});
	return;
};

(int debug) -> (const char compress[]) generateCompress = {
	char out[];
	int i;

	/* header */

	printf(out, "/* Generated by generateCompress() method of %s */\r\n\r\n", {version});
	if (debug) printf(out, "#include \"../../../../stdlib/stdlib.dpvmake\"\r\n\r\n", {});
	printf(out, "(", {});
	for (i = 0; i < 8; i++)
		printf(out, "int h%x,%s", {i == 7 ? "\r\n\t\t" : " ", i});
	for (i = 0; i < 16; i++)
		printf(out, "int m%x,%s", {(i & 7) == 7 ? "\r\n\t\t" : " ", i});
	printf(out, "int t, int last, int outlen)\r\n\t\t-> (", {});
	for (i = 0; i < 8; i++)
		printf(out, "int h%x%s", {i == 7 ? ") compress = {\r\n" : ", ", i});

	/* initialization */

	printf(out, "\tint init = -((t - 129) >> 63), cont = ~init;\r\n", {});
	for (i = 0; i < 8; i++)
		printf(out, "\tint V%x = 0x%x;\r\n", {i + 8, blake2b_IV[i]});
	printf(out, "\th0 = h0 & cont | (V8 ^ outlen ^ 0x01010000) & init;\r\n", {});
	for (i = 1; i < 8; i++)
		printf(out, "\th%x = h%x & cont | V%x & init;\r\n", {i, i, i + 8});
	for (i = 0; i < 8; i++)
		printf(out, "\tint V%x = h%x;\r\n", {i, i});
	printf(out, "\tVc ^= t;\r\n", {});
	printf(out, "\tVe ^= -last;\r\n\r\n", {});

	/* main cycle */

	if (debug) Debug(out, 0, 0, 'h');

	for (i = 0; i < 12; i++) {
		int sigma[16..] = blake2b_sigma[i];

		if (debug) Debug(out, i, 0, 'V');
		if (debug) Debug(out, i, 8, 'V');
		if (debug) Debug(out, i, 0, 'm');
		if (debug) Debug(out, i, 8, 'm');

		Mix(out, sigma, 0, 4, 8,  12, 0,  1 );
		Mix(out, sigma, 1, 5, 9,  13, 2,  3 );
		Mix(out, sigma, 2, 6, 10, 14, 4,  5 );
		Mix(out, sigma, 3, 7, 11, 15, 6,  7 );

		Mix(out, sigma, 0, 5, 10, 15, 8,  9 );
		Mix(out, sigma, 1, 6, 11, 12, 10, 11);
		Mix(out, sigma, 2, 7, 8,  13, 12, 13);
		Mix(out, sigma, 3, 4, 9,  14, 14, 15);

		printf(out, "\r\n", {});
	}

	if (debug) Debug(out, 12, 0, 'h');
	if (debug) Debug(out, 12, 0, 'V');
	if (debug) Debug(out, 12, 8, 'V');

	/* finish */

	printf(out, "\treturn (", {});
	for (i = 0; i < 8; i++)
		printf(out, "h%x ^ V%x ^ V%x%s", {i == 7 ? ");\r\n};\r\n" : ", ", i, i, i + 8});

	return out;
};
