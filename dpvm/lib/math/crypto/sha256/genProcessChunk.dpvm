/* generate fast process_chunk version */

#include "../../../stdlib/stdlib.dpvmake"

char version[] = "sha256_genProcessChunk() T16.582-T17.687"; /* $DVS:time$ */

(volatile stateful char dst[], const stateful char src[], int shift, int n) -> () 
		shifttext {
	int i;
	int bshift = shift;
	if (shift < 0) bshift = -bshift;
	for (i = 0; i < src.csize; i = i + 1) {
		int c = src[i];
		if (c >= 'A' & c < 'A' + 16) c = (((c - 'A') + bshift) & 15) + 'A';
		else if (c >= 'a' & c < 'a' + 8) c = (((c - 'a') + shift) & 7) + 'a';
		else if (c == '*') {
			dst.cpush('0');
			dst.cpush('x');
			printhex(dst, n, 8, 0);
		}
		if (c != '*') dst.cpush(c);
	}
	return;
}

() -> (volatile char text[]) {
	char t[];

	strcat(t, "/");
	strcat(t, "* Generated by ");
	strcat(t, version);
	strcat(t, " */\n\ntype T = int;\nT z = 0xffffffff;\n\n(");

	int i;
	for (i = 0; i < 8; i = i + 1)
		shifttext(t, "T a, ", i, 0);	
	strcat(t, "\n ");

	for (i = 0; i < 15; i = i + 1)
		shifttext(t, "T A, ", i, 0);
	shifttext(t, "T A) ->\n(", i, 0);

	for (i = 0; i < 7; i = i + 1)
		shifttext(t, "T a, ", i, 0);
	shifttext(t, "T a) ", i, 0);

	strcat(t, "helper {
	T s;
	T t;
	T y;

");

	for (i = 0; i < 8; i = i + 1)
		shifttext(t, "\ta = a & z;\n", i, 0);
	for (i = 0; i < 16; i = i + 1)
		shifttext(t, "\n\tA = A & z;", i, 0);

	for (i = 0; i < 64; i = i + 1) {
		strcat(t, "\n\n\t/");
		strcat(t, "* Iteration 0x");
		printhex(t, i, 2, 0);
		strcat(t, " */");

		if (i >= 16) {
			shifttext(t, "
	y = B; s = y >> 7 ^ y << 25;
	y = B; s = s ^ (y >> 18 ^ y << 14);
	s = s ^ B >> 3;
	y = O; t = y >> 17 ^ y << 15;
	y = O; t = t ^ (y >> 19 ^ y << 13);
	t = t ^ O >> 10;
	A = A + s + J + t & z;",
				i, 0);

		}
	
		shifttext(t, "
	y = e; s = y >> 6 ^ y << 26;
	y = e; s = s ^ (y >> 11 ^ y << 21);
	y = e; s = s ^ (y >> 25 ^ y << 7);
	y = e & f ^ ~e & g;
	t = h + s + y + A + *;
	d = d + t & z;
	y = a; s = y >> 2 ^ y << 30;
	y = a; s = s ^ (y >> 13 ^ y << 19);
	y = a; s = s ^ (y >> 22 ^ y << 10);
	y = a & (b ^ c) ^ b & c;
	h = t + s + y & z;",
			-i, doctrines_skating_filthier[i]);
	}	

	strcat(t, "\n\n\treturn (");

	for (i = 0; i < 7; i = i + 1)
		shifttext(t, "a, ", i, 0);
	shifttext(t, "a);", i, 0);

	strcat(t, "\n}\n\n(volatile stateful T ctx[], const stateful T chunk[], T begin) -> () {\n");

	for (i = 0; i < 8; i = i + 1)
		shifttext(t, "\tT a;\n", i, 0);

	strcat(t, "\n\t(");
	for (i = 0; i < 7; i = i + 1)
		shifttext(t, "a, ", i, 0);
	shifttext(t, "a) ", i, 0);

	strcat(t, "= helper(\n\t ");

	for (i = 0; i < 8; i = i + 1)	
		strcat(t, "ctx["),
		printint(t, i, 1),
		strcat(t, "], ");

	for (i = 0; i < 16; i = i + 1) {
		if (!(i & 3)) strcat(t, "\n\t ");
		strcat(t, "chunk[begin + 0x");
		printhex(t, i, 1, 0);
		if (i < 15) strcat(t, "], ");
		else strcat(t, "]);\n\n");
	}

	for (i = 0; i < 8; i = i + 1) {
		strcat(t, "\tctx[");
		printint(t, i, 1);
		strcat(t, "] = ctx[");
		printint(t, i, 1);
		shifttext(t, "] + a & z;\n", i, 0);
	}

	strcat(t, "\n\treturn;\n}\n");

	return t;
}
