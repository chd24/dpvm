/* hmac class, public header, T19.991-T19.993; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.1, T19.354-T19.744 */

type hmacTest = {
	const char key[];
	const char message[];
	const char result[];	/* hex string */
	int flags;
};

int HMAC_TEST_HASH		= 1;
int HMAC_TEST_SIGNATURE		= 2;

type hmacMethods = {
	const char version[];
	const (volatile stateful any hmacObj) -> (const char error[], int flags) getFlags;
	const (volatile stateful any hmacObj, int flags) -> (const char error[]) setFlags;
	const (volatile stateful any hmacObj, const stateful any registry) -> (const char error[]) setRegistry;
	const (volatile stateful any hmacObj, const char hashName[]) -> (const char error[]) setHash;
	const (volatile stateful any hmacObj, const char key[]) -> (const char error[]) setKey;
	const (volatile stateful char output[], const stateful any hmacObj, const char message[]) -> (const char error[])
		computeHash;
	const (volatile stateful char output[], const stateful any hmacObj, const char message[]) -> (const char error[])
		signMessage;
	const (const (volatile stateful any data, const char hashName[], const hmacTest test) -> (const char error[]) callback,
		volatile stateful any data) -> (const char error[]) forAllTests;
	const (volatile stateful char out[], volatile stateful any hmacObj) -> (const char error[]) dump;
};

type hmacClass = {
	volatile any data;
	const hmacMethods methods;
};
