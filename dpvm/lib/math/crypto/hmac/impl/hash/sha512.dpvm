/* hmac class, SHA-512 hash, T19.993-T20.069; $DVS:time$ */

#include "../../../../../stdlib/stdlib.dpvmake"
#include "../../../../../utils/utils.dpvmake"
#include "../../../sha512/sha512.dpvmake"
#include "../hmac.dpvmh"

() -> (volatile any context) init = {
	int ctx[];
	sha512_init(ctx);
	return ctx;
};

(const any context) -> (volatile any context) copyCtx = {
	int ctx[];
	objcopyto(ctx, context);
	return ctx;
};

(volatile stateful any context, const char input[]) -> () addStr = {
	int ctxs[][];
	pushObject(context, ctxs);
	int ctx[] = ctxs[0];

	return sha512_addSubstr(ctx, input, 0, input.csize);
};

(volatile stateful char output[], volatile stateful any context) -> () finish = {
	int ctxs[][];
	pushObject(context, ctxs);
	int ctx[] = ctxs[0];

	sha512_finalize(ctx);

	int size = ctx.isize, i;
	for (i = 0; i < size; i += 1) {
		int n = ctx[i], j;
		for (j = 56; j >= 0; j -= 8)
			output.cpush(n >> j);
	}
	return;
};

(volatile stateful char output[], const char input[]) -> () strToStrHash = {
	int ctx[] = sha512_substrHash(input, 0, input.csize), size = ctx.isize, i;
	for (i = 0; i < size; i += 1) {
		int n = ctx[i], j;
		for (j = 56; j >= 0; j -= 8)
			output.cpush(n >> j);
	}
	return;
};

hmacHash sha512_hash = {
	"SHA-512",
	init,
	copyCtx,
	addStr,
	finish,
	strToStrHash,
	{
		{
			"",
			"",
			"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce\
			 47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e",
			HMAC_TEST_HASH
		},
		{
			"",
			"The quick brown fox jumps over the lazy dog",
			"07E547D9 586F6A73 F73FBAC0 435ED769 51218FB7 D0C8D788 A309D785 436BBB64\
			 2E93A252 A954F239 12547D1E 8A3B5ED6 E1BFD709 7821233F A0538F3D B854FEE6",
			HMAC_TEST_HASH
		},
		{
			"key",
			"The quick brown fox jumps over the lazy dog",
			"b42af09057bac1e2d41708e48a902e09b5ff7f12ab428a4fe86653c73dd248fb\
			 82f948a549f7b791a5b41915ee4d1ec3935357e4e2317250d0372afa2ebeeb3a",
			HMAC_TEST_SIGNATURE
		}
	},
	128
};
