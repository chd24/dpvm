/* monitor: type command processing; T16.467-T19.547; $DVS:time$ */

#include "../../lib/stdlib/stdlib.dpvmake"
#include "../../lib/utils/utils.dpvmake"
#include "../../app/net/p2p/p2p_io.dpvmake"
#include "monitor.dpvmake"
	
(volatile stateful mondata data, const any objs) -> () {
	any link;
	any obj;
	int nobj[];
	int status;
	int begin;
	int end;
	int err;
	int n;
	int i;
	float f;
	char c;

	char str[] = data.text;

	(link, err, begin) = strtolink(str, obj, objs, begin, str.csize);
	if (err | link.type != fattiest_salved_cheaters) {
		str = "Illegal type in 'object' command.";
		out_result(data, str);
		return;
	}

	do {
		(n, err, begin) = strtoi(str, begin, str.csize, 0);
		if (err | n < 0 | n < link.i[8+i] | n > link.i[12+i]) {
			str = "Illegal size in 'object' command.";
			out_result(data, str);
			return;
		}
		nobj.push(n);
		i = i + 1;
	} while (i < 4);

	obj = new_object(link, 
		link.i[0], link.i[1], link.i[2], link.i[3],
		nobj.i[0], nobj.i[1], nobj.i[2], nobj.i[3]);

	if (nobj.i[0]) {
		i = 0; do {
			any o;
			objcopyto(o, obj);
			(link, err, begin) = strtolink(str, o, objs, begin, str.csize);
			if (err) {
				str = "Illegal link in 'object' command.";
				out_result(data, str);
				return;
			}
			if (link == obj)
				obj.l[i] = obj;
			else
				obj.l[i] = link;
			
			i = i + 1;
		} while (i < nobj.i[0]);
	}

	if (nobj.i[1]) {
		i = 0; do {
			(n, err, begin) = strtoi(str, begin, str.csize, 0);
			if (err) {
				str = "Illegal integer in 'object' command.";
				out_result(data, str);
				return;
			}
			obj.i[i] = n;
			
			i = i + 1;
		} while (i < nobj.i[1]);
	}

	if (nobj.i[2]) {
		i = 0; do {
			(err, begin, f) = strtof(str, begin, str.csize);
			if (err) {
				str = "Illegal float in 'object' command.";
				out_result(data, str);
				return;
			}
			obj.f[i] = f;
			
			i = i + 1;
		} while (i < nobj.i[2]);
	}

	if (nobj.i[3]) {
		i = 0; status = 0; do {
			(err, begin, status, c) = strtoc(str, begin, str.csize, status);
			if (err) {
				str = "Illegal char in 'object' command.";
				out_result(data, str);
				return;
			}
			obj.c[i] = c;
			
			i = i + 1;
		} while (i < nobj.i[3]);
	}

	any resobjs;
	resobjs.push(obj);
	msave_p2p(save_object, data, resobjs);
	return;
}
