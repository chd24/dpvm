/* preamble of asm function; T19.509-T19.512; $DVS:time$ */

#include "floats.dpvmake"

(volatile stateful floatsData data) -> () preamble = {
	int i, n = data.nInputs;

	for (i = 0; i < n; i += 1)
		if (asmRegs[i].save)
			doAsm(data, "push r", "41?R==1 50+r*1", i, 0);

	for (i = 0; i < n; i += 1) {
		doAsm(data, "mov r,[rdi+b]", "48+R*4 8B 47+r*8 b0", i, (i - n) << 3);
		data.links.ipush(i);
	}

	for (i = 0; i < n; i += 1) {
		int reg = asmRegs[i].number & 7;
		doAsm(data, "mov r,[r+b]", "48+R*5 8B 40+r*9 b0", i, 0x10);
	}

	return;
};
