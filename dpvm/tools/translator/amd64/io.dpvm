/* dpvm byte code translator, amd64 io operations; T16.081-T18.397; $DVS:time$ */

/* 
 	rsi = ints stack end
*/

#include "amd64.dpvmake"

(volatile stateful asm_instr list[], const char mnem[], const char hex[],
		int paramA, int paramB, int paramC, int paramD, int next) -> ()
	as = asm_add;

(const stateful translator_data data, volatile stateful asm_instr list[], 
		const stateful char asm_[], const stateful char hex_[], 
		int datatype, int param, int reg, int i, int n) -> ()
	ld = amd64_load;

(volatile stateful translator_data data, volatile stateful asm_instr list[],
		volatile stateful asm_instr endlist[], int i, int c) -> (int res) {
	int taddr;
	int ioaddr;
	int r;
	int n;
	int f;
	int j;

	c &= 0xf;

	if (c <= 7) f = 0x6020440764462003 >> (c << 3) & 0xff;
	else f = 0x6161604100462020 >> ((c - 8) << 3) & 0xff;

	if (!f) return -1;

	taddr = getaddr(data.addrs, "thread");
	if (taddr == -1) return -1;
	ioaddr = getaddr(data.addrs, "io");
	if (ioaddr == -1) return -1;

	ld(data, list, "cp", "48 8B", 0, 0, 0, i, 0);
	ld(data, list, "cp", "48 8B", 0, 0, 1, i, -1);

	amd64_precall(list);

	as(list, "xor r9,r9", "4D 31 C9", 0, 0, 0, 0, 0);
	as(list, "push r9", "41 51", 0, 0, 0, 0, 0);

	for (j = 0, n = 0; j < 5; j += 1)
		if (f >> j & 1)
			n -= 1;

	for (j = 0; j < 5; j += 1) {
		if (f >> j & 1) {
			n += 1;
			ld(data, list, "mov", "48 8B", 1, 0, 2, i, n);
			as(list, "push rdx", "52", 0, 0, 0, 0, 0);
		} else
			as(list, "push r9", "41 51", 0, 0, 0, 0, 0);
	}

	as(list, "mov rsi,rcx", "48 89 CE", 0, 0, 0, 0, 0);

	n = 2;

	if (f >> 6 & 1) {
		ld(data, list, "cp", "48 8B", 0, 0, 2, i, -n);
		n += 1;
	} else
		as(list, "xor rdx,rdx", "48 31 D2", 0, 0, 0, 0, 0);

	if (f >> 5 & 1) {
		ld(data, list, "cp", "48 8B", 0, 0, 1, i, -n);
		n += 1;
	} else
		as(list, "xor rcx,rcx", "48 31 C9", 0, 0, 0, 0, 0);

	j = data.i[0];
	data.i[0] = j + 2;

	as(list, "mov rdi,rax", "48 89 C7", 0, 0, 0, 0, 0);
	as(list, "mov rax,q", "48 B8 128", 0, 0, taddr, 0, 0);
	as(list, "call rax", "FF D0", 0, 0, 0, 0, 0);
	as(list, "lea rsp,[rsp+b]", "48 8D 64 24 111", 0, 48, 0, 0, 0);
	as(list, "test rax,rax", "48 85 C0", 0, 0, 0, 0, 0);
	as(list, "jcc label", "0F 101 134", 0x84, 0, 0, j, 0);
	as(endlist, "label", "", 0, 0, 0, j, 0);
	amd64_call(endlist, -1);
	amd64_stack_fail(data, endlist, i);
	int errn = i;
	if (i >= 0xf00) errn = 0xf00 | data.func.c[i];
	errn = data.func << 17 | errn << 5;
	as(endlist, "mov rax,q", "48 B8 128", 0, 0, errn | 9, 0, 0);
	as(endlist, "ret", "C3", 0, 0, 0, 0, 0);

	as(list, "mov rdi,rax", "48 89 C7", 0, 0, 0, 0, 0);
	as(list, "mov rsi,d", "48 C7 C6 124", 0, 0, data.func.c[i], 0, 0);
	as(list, "mov rax,q", "48 B8 128", 0, 0, ioaddr, 0, 0);
	as(list, "call rax", "FF D0", 0, 0, 0, 0, 0);	
	amd64_call(list, -1);
	as(list, "test rax,rax", "48 85 C0", 0, 0, 0, 0, 0);
	as(list, "jcc label", "0F 101 134", 0x85, 0, 0, j + 1, 0);
	as(endlist, "label", "", 0, 0, 0, j + 1, 0);
	as(endlist, "push rax", "50", 0, 0, 0, 0, 0);
	amd64_stack_fail(data, endlist, i);
	as(endlist, "pop rax", "58", 0, 0, 0, 0, 0);
	as(endlist, "ret", "C3", 0, 0, 0, 0, 0);

	do {
		n -= 1;
		r = amd64_unlink(data, list, endlist, i, -n);
	} while (n);

	return r;
}
