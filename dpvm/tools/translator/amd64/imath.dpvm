/* dpvm byte code translator, amd64 int computations; T16.081-T18.397; $DVS:time$ */

/* 
 	rsi = ints stack end
*/

#include "amd64.dpvmake"

(volatile stateful asm_instr list[], const char mnem[], const char hex[],
		int paramA, int paramB, int paramC, int paramD, int next) -> ()
	as = asm_add;

(const stateful translator_data data, volatile stateful asm_instr list[], 
		const stateful char asm_[], const stateful char hex_[], 
		int datatype, int param, int reg, int i, int n) -> ()
	ld = amd64_load;

(const stateful translator_data data, volatile stateful asm_instr list[], 
		int datatype, int reg, int i, int n) -> ()
	st = amd64_store;

(volatile stateful translator_data data, volatile stateful asm_instr list[],
		volatile stateful asm_instr endlist[], int i, int c) -> (int i) {
	int iz;
	int r;
	int n;
	int f;

	if (c == 0x9B || c == 0xCF) { /* neg, not */
		ld(data, list, "mov", "48 8B", 1, 0, 0, i, 1);
		as(list, "uop rax", "48 F7 101", 0xD0+((c+1)&8), 0, 0, 0, 0);
		st(data, list, 1, 0, i, 0);
		return i;
	}

	if (c >= 0x98 && c <= 0x9A) { /* eq, lt, gt */
		ld(data, list, "mov", "48 8B", 1, 0, 0, i, 0);
		ld(data, list, "cmp", "48 3B", 1, 0, 0, i, 1);
		as(list, "setcc al", "0F 101 C0", 0x9C9F94>>((c&3)<<3)&0xff, 0, 0, 0, 0);
		as(list, "movzx rax,al", "48 0F B6 C0", 0, 0, 0, 0, 0);
		st(data, list, 1, 0, i, 0);
		return i;
	}

	if ((c >= 0xC0 && c <= 0xC1) || (c >= 0xCC && c <= 0xCE)) { /* add, sub, and, or, xor */
		ld(data, list, "mov", "48 8B", 1, 0, 0, i, 0);
		if (c == 0xC1) {
			as(list, "uop rax", "48 F7 101", 0xD8, 0, 0, 0, 0);
		}
		ld(data, list, "bop", "48 101", 1, 0x330B2300000303>>((c&7)<<3)&0xff, 0, i, 1);
		st(data, list, 1, 0, i, 0);
		return i;
	}

	if (c == 0xC8 || c == 0xC9) { /* shl, shr */
 		if (i > 0) { n = data.func.c[i - 1]; if (n < 0x80) {
			asm_del(list, 0);
			asm_del(list, 0);
			ld(data, list, "mov", "48 8B", 1, 0, 0, i, 1);
			as(list, "sh rax,b", "48 C1 101 121", 0xE0|(c&1)<<3, 0, n, 0, 0);
			st(data, list, 1, 0, i, 0);
			return i;
		} }
		ld(data, list, "mov", "48 8B", 1, 0, 1, i, 0);
		ld(data, list, "mov", "48 8B", 1, 0, 0, i, 1);
		as(list, "sh rax,cl", "48 D3 101", 0xE0|(c&1)<<3, 0, 0, 0, 0);
		st(data, list, 1, 0, i, 0);
		return i;
	}

	if (c == 0xC2) { /* mul */
		f = 1;
		if (i < data.func.csize - 1) {
			if (data.func.c[i + 1] == 0xA9) { f = 0; i += 1; } /* ipops */
		}
		ld(data, list, "mov", "48 8B", 1, 0, 0, i, f);
		if (f) {
			n = data.l[4].l[i].i[1] - data.l[0].i[1] - 2;

			if (n >= -16 && n <= 15)
				as(list, "mul [rsi+b]", "48 F7 66 111", 0, n<<3, 0, 0, 0);
			else
				as(list, "mul [rsi+d]", "48 F7 A6 114", 0, n<<3, 0, 0, 0);
		}
		if (!f)
			ld(data, list, "mul", "48 0F AF", 1, 0, 0, i, 1);
		st(data, list, 1, 0, i, f);
		if (f)
			st(data, list, 1, 2, i, 0);
		return i;
	}

	if (c == 0xC3) { /* div */
		iz = data.i[0];
		data.i[0] = iz + 2;
		f = 1;
		if (i < data.func.csize - 2) {
			if (data.func.c[i + 1] == 0 && data.func.c[i + 2] == 0xA5) { /* 0 istore */
				i += 2;
				f = 0;
			}
		}
		if (f && i < data.func.csize - 1) {
			if (data.func.c[i + 1] == 0xA9) { /* ipops; % */
				i += 1;
				f = 2;
			}
		}
		ld(data, list, "mov", "48 8B", 1, 0, 1, i, f & 1);
		ld(data, list, "mov", "48 8B", 1, 0, 0, i, (f & 1) + 1);
		as(list, "cqo", "48 99", 0, 0, 0, 0, 0);
		as(list, "test rcx,rcx", "48 85 C9", 0, 0, 0, 0, 0);
		as(list, "jz label", "0F 84 134", 0, 0, 0, iz, 0);
		as(list, "idiv rcx", "48 F7 F9", 0, 0, 0, 0, 0);
		as(list, "label", "", 0, 0, 0, iz + 1, 0);
		st(data, list, 1, f & 2, i, 0);
		if (f & 1)
			st(data, list, 1, 2, i, 1);
		as(endlist, "label", "", 0, 0, 0, iz, 0);
		as(endlist, "mov rdx,rax", "48 89 C2", 0, 0, 0, 0, 0);
		as(endlist, "mov rax,rcx", "48 89 C8", 0, 0, 0, 0, 0);
		as(endlist, "jmp label", "E9 134", 0, 0, 0, iz + 1, 0);
		return i;
	}

	return i;
}
