/* dpvm byte code translator, amd64 free object; T16.081-T19.631; $DVS:time$ */

/* 
 	rdi = links stack
*/

#include "amd64.dpvmake"

(volatile stateful asm_instr list[], const char mnem[], const char hex[],
		int paramA, int paramB, int paramC, int paramD, int next) -> ()
	as = asm_add;

(const stateful translator_data data, volatile stateful asm_instr list[], 
		const stateful char asm_[], const stateful char hex_[], 
		int datatype, int param, int reg, int i, int n) -> ()
	ld = amd64_load;

(volatile stateful translator_data data, volatile stateful asm_instr list[],
		volatile stateful asm_instr endlist[], int i, int n) -> (int res) {
	int addr = getaddr(data.addrs, "free");
	if (addr == -1) { return -1; }

	if (i >= 0) {
		ld(data, list, "mov", "48 8B", 0, 0, 0, i, n);
	}
	if (i >= -1) {
		as(list, "mov rcx,d", "48 C7 C1 124", 0, 0, -1, 0, 0);
	}
	as(list, "lock xadd [rax+b],rcx", "F0 48 0F C1 48 111", 0, 0x78, 0, 0, 0);

	int j = data.i[0];
	data.i[0] = j + 2;

	as(list, "jcc label", "0F 101 134", 0x84, 0, 0, j, 0);
	as(list, "label", "", 0, 0, 0, j + 1, 0);

	as(endlist, "label", "", 0, 0, 0, j, 0);
	if (i < 0 && n < 0) {
		as(endlist, "push rdx", "52", 0, 0, 0, 0, 0);
		as(endlist, "push r9", "41 51", 0, 0, 0, 0, 0);
	}
	amd64_precall(endlist);
	as(endlist, "mov rdi,r8", "4C 89 C7", 0, 0, 0, 0, 0);
	as(endlist, "mov rsi,rax", "48 89 C6", 0, 0, 0, 0, 0);
	amd64_call(endlist, addr);
	if (i < 0 && n < 0) {
		as(endlist, "pop r9", "41 59", 0, 0, 0, 0, 0);
		as(endlist, "pop rdx", "5A", 0, 0, 0, 0, 0);
	}
	as(endlist, "jmp label", "E9 134", 0, 0, 0, j + 1, 0);
	
	return 0;
}
