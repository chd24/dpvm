/* linker class, methods implementation, T20.360-T20.363; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.2, T19.354-T20.056 */

#include "../../../tools/registry/registry.dpvmake"
#include "../formats/formats.dpvmake"
#include "linker.dpvmake"
#include "version.dpvmh"

int registryMask = REGISTRY_CHECKER + REGISTRY_TRANSLATOR;	/* mask of registry applications used by linker class */

(volatile stateful any linkerObj) -> (const char error[], int flags) getFlags = {
	linkerImpl impl;
	char err[] = convertObjToImpl(impl, linkerObj, "getFlags");
	if (err.csize) return (err, 0);

	return ("", impl.data.flags);
};

(volatile stateful any linkerObj, int flags) -> (const char error[]) setFlags = {
	linkerImpl impl;
	char err[] = convertObjToImpl(impl, linkerObj, "setFlags");
	if (err.csize) return err;

	impl.data.flags = flags;
	return "";
};

(volatile stateful any linkerObj, const stateful any registry) -> (const char error[]) setRegistry = {
	linkerImpl impl;
	char err[] = convertObjToImpl(impl, linkerObj, "setRegistry");
	if (err.csize) return err;

	registryData registryCopy = registryObj.copy(registry);
	err = registryObj.check(registryCopy, registryMask);
	if (err.csize) return err;

	impl.data.registry = registryCopy;
	impl.data.registrySet = 1;
	return "";
};

(volatile stateful any linkerObj, const char formatName[]) -> (const char error[]) setFormat = {
	linkerImpl impl;
	char err[] = convertObjToImpl(impl, linkerObj, "setFormat");
	if (err.csize) return err;

	int i;
	for (i = 0; i < allFormats.lsize; i++) {
		if (allFormats[i].name == formatName) {
			impl.data.format = allFormats[i];
			impl.data.formatSet = 1;
			return "";
		}
	}

	return mkError("format not found", "setFormat");
};

(volatile stateful any linkerObj, const char arch[]) -> (const char error[]) setArch = {
	linkerImpl impl;
	char err[] = convertObjToImpl(impl, linkerObj, "setArch");
	if (err.csize) return err;

	impl.data.arch = arch;
	impl.data.archSet = 1;
	return "";
};

linkerMethods linkerMethodsImpl = {
	version,
	getFlags,
	setFlags,
	setRegistry,
	setFormat,
	setArch,
	dump,
	link
};
