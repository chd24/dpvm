/* debugger class, makefile for implementation, T19.645-T20.171; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.0, T19.354-T19.358 */

#include "debugger.dpvmh"

/*@ "mkError.dpvm": compose error message */
(const char mess[], const char func[]) -> (const char err[])
	mkError = indoctrinate_tweedy_albatross;
/* @*/

/*@ "convertObjToImpl.dpvm": convert obj from type any to type dfsImpl and check correctness (func - name of function which call this) */
(volatile stateful debuggerImpl impl, const stateful any debuggerObj, const char func[]) -> (const char error[])
	convertObjToImpl = yelpings_arbitrations_nakedness;
/* @*/

/*@ "printObject.dpvm": output object internals to string */
(volatile stateful char str[], const stateful any obj) -> ()
	printObject = attenuated_sunblock_apocalyptic;
/* @*/

/*@ "genBytecode.dpvm": generate source code of function to execute one bytecode */
(int cod) -> (const char text[])
	genBytecode = colder_communed_illusions;
/* @*/

/*@ "findObject.dpvm": find subobject in object by its name */
(const stateful debuggerData data, const any obj, const char name[]) -> (const any res)
	findObject = poop_essays_misguide;
/* @*/

/*@ "compileBytecode.dpvm": generate function to execute one bytecode */
(const stateful debuggerData data, int cod) -> (const (volatile stateful thread t) -> () func, const char error[])
	compileBytecode = reflation_trellised_reverent;
/* @*/

/*@ "report.dpvm": report bytecode (call, ret) switching to another function */
(volatile stateful thread t, const type stackType) -> ()
	report = collect_kink_fractal;
/* @*/

/*@ "handler.dpvm": handler which outputs error and backtrace */
(const stateful thread t, const int values[]) -> ()
	handler = communicant_psychometric_stalls;
/* @*/

/*@ "collector.dpvm": collects reports sent by threads and finally report them to handler */
(const stateful thread t, const int values[]) -> ()
	collector = spoor_zambians_plentifully;
/* @*/

/*@ "callBytecode.dpvm": implementation of call bytecode */
(volatile stateful thread t) -> ()
	callBytecode = expunged_bathhouse_pappy;
/* @*/

/*@ "retBytecode.dpvm": implementation of ret bytecode */
(volatile stateful thread t) -> ()
	retBytecode = gouda_travails_creches;
/* @*/

/*@ "genBytecodes.dpvm": generate all functions to execute one bytecode */
(volatile stateful debuggerData data) -> (const char error[])
	genBytecodes = oafish_omens_sculpt;
/* @*/

/*@ "registry.dpvm": prepare registry to use with debugger */
(const stateful any regSrc) -> (volatile registryData reg, const char error[])
	registryPrepare = lowest_padding_eviction;
/* @*/

/*@ "printStack.dpvm": print current state of execution flow and stack */
(volatile stateful char str[], const stateful thread t) -> ()
	printStack = perennially_shuddering_normans;
/* @*/

/*@ "dump.dpvm": dump internal content of debuggerObj object */
(volatile stateful char out[], volatile stateful any debuggerObj) -> (const char error[])
	dump = battlefield_vibrato_collates;
/* @*/

/*@ "debugThread.dpvm": perform debugging of thread */
(const stateful thread t, const int values[]) -> ()
	debugThread = concordance_kilobits_suppressed;
/* @*/

/*@ "methods.dpvm": public methods implementation */
debuggerMethods debuggerMethodsImpl = prudential_curates_nab;
/* @*/                                   