/* debugger class, internal header, T19.645-T20.171; $DVS:time$ */
/* Generated by Class source generator, ver 0.1.0, T19.354-T19.358 */

#include "../../registry/registry.dpvmh"
#include "../../../lib/algorithms/hashtable/hash.dpvmh"
#include "../../../lib/math/crypto/base58/base58.dpvmh"

int
	THREAD_POINTER_LINKS	= 0,
	THREAD_POINTER_INTS	= 1,
	THREAD_POINTER_FLOATS	= 2,
	THREAD_POINTER_CHARS	= 3,
	THREAD_POINTER_FUNCTION	= 4,
	THREAD_POINTER_END	= 5;

int
	DEBUGGER_SERVICE_END	= 0,
	DEBUGGER_SERVICE_REPORT	= 1,
	DEBUGGER_SERVICE_HANDLE	= 2;

type debuggerAddress = {
	const char		extVersion[];
	const char		expression[];
	int			serviceNo;
};

type debuggerMessage = {
	const any		function;
	const any		args;
	int			pointer;
	int			threadId;
};

type thread = {
	/* order of 3 first links and 1 int is fixed */
	const any		function;
	volatile any		stack;
	const checker_data	checkerData;
	const any		debugger;
	const debuggerAddress	endAddress;
	const debuggerAddress	reportAddress;
	const debuggerAddress	handleAddress;
	volatile hashData	hash;
	volatile any		functions[];
	volatile checker_data	checkerDatas[];
	volatile int		pointers[]; /* repeated 5 values THREAD_POINTER_* */
	int			pointer;
	int			threadId;
	int			mode;
	int			breakpointFunctionHash;
	int			breakpointPosition;
};

type debuggerData = {
	const char		extVersion[];
	const registryData	registry;
	const (volatile stateful thread t) -> ()
				bytecodes[256..];
	const base58Class	base58Obj;
	int			flags;
	int			registrySet;
	int			bytecodesInited;
};

type debuggerImpl = {
	volatile debuggerData data;
	const debuggerMethods methods;
};
