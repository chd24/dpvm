/* dpvm: put integer to stack; T16.544-T16.667; $DVS:time$ */

#include "compiler.dpvmake"

(volatile stateful compdata data, int n) -> () {
	any dst = data.dst;
	char c;

	if (!(n & ~0x7f)) {
		c = n; dst.push(c);
		data.ndst = data.ndst + 1;
		return;
	}

	if (n >= 0 & n <= 0xfe) {
		c = 0x7f;     dst.push(c);
		c = n - 0x7f; dst.push(c);
		c = 0xC0;     dst.push(c);	/* + */
		data.ndst = data.ndst + 3;
		return;
	}

	int k = n;
	int e = 0;
	while (!(k & 1)) { k = k >> 1; e = e + 1; }

	if (!(k & ~0x7f)) {
		c = k;    dst.push(c);
		c = e;    dst.push(c);
		c = 0xC8; dst.push(c);		/* << */
		data.ndst = data.ndst + 3;
		return;
	} 

	if (n & ~0x3fff) {
		int i = 0;
		int size = dst.isize;
		if (size > 128) size = 128;
		int f = 1;
		while (i < size & f)
			if (dst.i[i] == n) f = 0;
			else i = i + 1;
		if (i < 128) {
			if (f) dst.push(n);
			c = 0x82; dst.push(c);	/* code */
			c = i;    dst.push(c);
			c = 0xB1; dst.push(c);	/* iget */
			data.ndst = data.ndst + 3;
			return;
		}
	}

	if (n < 0) {
		code(data, -n);
		c = 0x9B; dst.push(c);		/* neg */
		data.ndst = data.ndst + 1;
		return;
	}

	if (e >= 7) {
		code(data, k);
		c = e;    dst.push(c);
		c = 0xC8; dst.push(c);		/* << */
		data.ndst = data.ndst + 2;
		return;
	}

	code(data, n & ~0x7f);
	c = n & 0x7f; dst.push(c);
	c = 0xC0;     dst.push(c);		/* + */
	data.ndst = data.ndst + 2;
	return;
}
