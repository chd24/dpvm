/* get lexem; T15.426-T20.363; $DVS:time$ */

#include "compiler.dpvmake"

/* char[256], types of chars, 0-space, 1-sign, 2-letter */	
char char_types[] = cashew_impotence_breed; 

(const stateful char src[], const stateful int lexems_[], int pos, int end) -> (int new_pos, int end, int lexem) getlexem = {
	int oldpos = pos;
	pos = skipSpaces(src, pos, end);
	if (pos < 0 || pos >= end)
		return (oldpos, end, -1);

	char lexem[];
	int oldind = -1;
	int oldt = 0;

	while (1) {
		int c;
		int t;

		if (pos < end)
			c = src[pos],
			t = char_types[c];
		else
			t = 0;

		int fin = (oldt != 0 && t != oldt);
		int insign = (t == 1);

		if (!fin)
			lexem.cpush(c),
			pos = pos + 1;

		int ind = -1;
		if (fin | insign) {
			int h = lexem;
			int first = 0;
			int last = lexems_.isize - 1;
			while (last > first) {
				int mid = (first + last) >> 1;
				int l = lexems_[mid] >> 16;
				if (l == h)
					first = mid, last = mid;
				else if (l < h)
					first = mid + 1;
				else
					last = mid - 1;
			}
			if (first == last) {
				if (lexems_[first] >> 16 == h)
					ind = first;
			}

			if (fin) {
				if (ind >= 0)
					return (pos, end, lexems_[ind] & (maxnames - 1));

				if (oldt == 2)
					return (pos, end, h << 16);

				if (oldind >= 0)				
					return (oldpos, end, lexems_[oldind] & (maxnames - 1));

				return (oldpos, end, -1);
			}

			if (ind >= 0) {
				oldpos = pos;
				oldind = ind;
			}
		}

		oldt = t;
	}

	return (oldpos, end, oldind);
}
