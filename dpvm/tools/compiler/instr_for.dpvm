/* dpvm: for statement; T16.521-T20.114; $DVS:time$ */

/* for (voidexpr; expr; voidexpr) instr */

#include "compiler.dpvmake"

(volatile stateful compdata data, const Instr instr) -> (int status) {
	int pos;
	int end;
	int status;
	char c;


	/* read 'for' */

	(pos, end, status) = getlexem(data.src, lexems, data.pos, data.end);

	if (status != 63) return -1;

	data.pos = pos;


	/* read '(' */

	(pos, end, status) = getlexem(data.src, lexems, data.pos, data.end);
	if (status) {
		data.mess = "( expected after for";
		return -2;
	}
	data.pos = pos;


	/* read void expr */

	status = getvoidexpr(data, instr);
	if (status < 0) {
		if (status != -2)
			data.mess = "void expression expected after ( in for";
		return -2;
	}

	
	/* read ';' */

	(pos, end, status) = getlexem(data.src, lexems, data.pos, data.end);
	if (status != 15) {
		data.mess = "; expected in for";
		return -2;
	}
	data.pos = pos;


	/* push 'lb' bytecode */

	c = 0x90; data.dst.push(c);
	data.ndst++;


	/* read expr */

	data.nlinks = 0;
	data.nints = 0;
	data.nfloats = 0;
	data.nchars = 0;
	type res;
	(res, status) = getexpr(data, instr);
	if (status != 1) {
		data.mess = "integer expression expected after ; in for";
		return -2;
	}


	/* read ';' */

	(pos, end, status) = getlexem(data.src, lexems, data.pos, data.end);
	if (status != 15) {
		data.mess = "; expected after expression in for";
		return -2;
	}
	data.pos = pos;


	/* read second void expr and remove result */

	int ndst = data.ndst;
	int pos0 = data.pos;
	status = getvoidexpr(data, instr);
	if (status < 0) {
		if (status != -2)
			data.mess = "void expression expected after ; in for";
		return -2;
	}
	int end0 = data.pos;
	data.dst.cpop(data.ndst - ndst);
	data.ndst = ndst;
	

	/* read ')' */

	(pos, end, status) = getlexem(data.src, lexems, data.pos, data.end);
	if (status != 1) {
		data.mess = ") expected after void expression in for";
		return -2;
	}
	data.pos = pos;


	/* push '0 iload jzf ipops' bytecodes */

	c =    0; data.dst.push(c);
	c = 0xA1; data.dst.push(c);
	c = 0x96; data.dst.push(c);
	c = 0xA9; data.dst.push(c);
	data.nints--;
	data.ndst += 4;


	/* compile instruction */

	status = instr(data);
	if (status) {
		if (status == -1)
			data.mess = "instruction expected after ) in for";
		return -2;
	}


	/* read second void expr again */

	int pos1 = data.pos;
	int end1 = data.end;
	data.pos = pos0;
	data.end = end0;
	status = getvoidexpr(data, instr);
	if (status < 0) {
		if (status != -2)
			data.mess = "void expression expected after ; in for";
		return -2;
	}
	data.pos = pos1;
	data.end = end1;


	/* push '1 lf jnzb' bytecodes */

	c =    1; data.dst.push(c);
	c = 0x94; data.dst.push(c);
	c = 0x93; data.dst.push(c);
	data.ndst += 3;


	return 0;
}
